{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/Information.ts","./src/app/Modal/change-password/change-password.component.ts","./src/app/Modal/change-password/change-password.component.html","./src/app/Modal/confirm-delete-image/confirm-delete-image.component.ts","./src/app/Modal/confirm-delete-image/confirm-delete-image.component.html","./src/app/Modal/confirm/confirm.component.ts","./src/app/Modal/confirm/confirm.component.html","./src/app/Modal/create-network/create-network.component.ts","./src/app/Modal/create-network/create-network.component.html","./src/app/Modal/edit-host/edit-host.component.ts","./src/app/Modal/edit-host/edit-host.component.html","./src/app/Modal/json-view/json-view.component.ts","./src/app/Modal/json-view/json-view.component.html","./src/app/Modal/service-form/service-form.component.ts","./src/app/Modal/service-form/service-form.component.html","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/components/advance-search-form/advance-search-form.component.ts","./src/app/components/advance-search-form/advance-search-form.component.html","./src/app/components/dashboard-card/dashboard-card.component.ts","./src/app/components/dashboard-card/dashboard-card.component.html","./src/app/components/dashboard/dashboard.component.ts","./src/app/components/dashboard/dashboard.component.html","./src/app/components/drag-and-drop-file/drag-and-drop-file.component.ts","./src/app/components/drag-and-drop-file/drag-and-drop-file.component.html","./src/app/components/expansions-user-management/expansions-user-management.component.ts","./src/app/components/expansions-user-management/expansions-user-management.component.html","./src/app/components/host/host.component.ts","./src/app/components/host/host.component.html","./src/app/components/image/image.component.ts","./src/app/components/image/image.component.html","./src/app/components/log-management/log-management.component.ts","./src/app/components/log-management/log-management.component.html","./src/app/components/login/login.component.ts","./src/app/components/login/login.component.html","./src/app/components/main/main.component.ts","./src/app/components/main/main.component.html","./src/app/components/network/network.component.ts","./src/app/components/network/network.component.html","./src/app/components/nodes-network-management/nodes-network-management.component.ts","./src/app/components/nodes-network-management/nodes-network-management.component.html","./src/app/components/panel/panel.component.ts","./src/app/components/panel/panel.component.html","./src/app/components/pie-chart/pie-chart.component.ts","./src/app/components/pie-chart/pie-chart.component.html","./src/app/components/service-monitoring/service-monitoring.component.ts","./src/app/components/service-monitoring/service-monitoring.component.html","./src/app/components/sidebar/sidebar.component.ts","./src/app/components/sidebar/sidebar.component.html","./src/app/components/table-expansions-service-monitoring/table-expansions-service-monitoring.component.ts","./src/app/components/table-expansions-service-monitoring/table-expansions-service-monitoring.component.html","./src/app/components/table-log-management/table-log-management.component.ts","./src/app/components/table-log-management/table-log-management.component.html","./src/app/components/toolbar/toolbar.component.ts","./src/app/components/toolbar/toolbar.component.html","./src/app/components/user-management/user-management.component.ts","./src/app/components/user-management/user-management.component.html","./src/app/components/wait-mode/wait-mode.component.ts","./src/app/components/wait-mode/wait-mode.component.html","./src/app/interceptors/spinner.interceptor.ts","./src/app/interceptors/unauthorized.interceptor.ts","./src/app/services/auth-guard/auth-guard.service.ts","./src/app/services/dashboard/dashboard.service.ts","./src/app/services/host/host.service.ts","./src/app/services/image/image.service.ts","./src/app/services/log-management/log-management.service.ts","./src/app/services/login-service/login.service.ts","./src/app/services/network/network.service.ts","./src/app/services/node-network-management/nodes-network-management.service.ts","./src/app/services/service-monitoring/service-monitoring.service.ts","./src/app/services/spinner/spinner.service.ts","./src/app/services/user-management/user-management.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import {HttpHeaders} from '@angular/common/http';\r\nimport {LoginService} from './app/services/login-service/login.service';\r\n\r\nexport class Information {\r\n  private _localHost = 'http://localhost:8090';\r\n  private _host = 'https://192.168.3.211:8080';\r\n  // private _host = 'https://192.168.3.31:8080';\r\n\r\n  get host() {\r\n    return this._host;\r\n  }\r\n\r\n  get localHost() {\r\n    return this._localHost;\r\n  }\r\n\r\n  //public host = 'http://192.168.3.210:8080';\r\n\r\n\r\n  getHeader(loginService?: LoginService, enableSpinner = true): HttpHeaders {\r\n\r\n\r\n    let headers = new HttpHeaders({\r\n      'Access-Control-Allow-Origin': '*',\r\n      'Access-Control-Allow-Methods': 'GET,POST,PATCH,DELETE,PUT,OPTIONS',\r\n      'Access-Control-Allow-Headers': 'Origin, Content-Type, X-Auth-Token, content-type',\r\n      'Access-Control-Allow-Credentials': 'true',\r\n      'withCredentials': 'true',\r\n    });\r\n\r\n    headers = headers.append('enable-spinner', String(enableSpinner));\r\n\r\n\r\n    if (loginService) {\r\n      headers = headers.append('Authorization', loginService.getTokenForHeader());\r\n    }\r\n\r\n    return headers;\r\n  }\r\n\r\n\r\n}\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {MatDialogRef} from '@angular/material/dialog';\r\nimport {AbstractControl, FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {LoginService} from '../../services/login-service/login.service';\r\nimport {MatSnackBar} from '@angular/material/snack-bar';\r\n\r\n\r\n@Component({\r\n  selector: 'app-change-password',\r\n  templateUrl: './change-password.component.html',\r\n  styleUrls: ['./change-password.component.css']\r\n})\r\nexport class ChangePasswordComponent implements OnInit {\r\n\r\n\r\n  hideCurrent = true;\r\n  hideConfirm = true;\r\n  hideNew = true;\r\n  alertMessage: string = null;\r\n\r\n\r\n  idOfUsername;\r\n\r\n  constructor(public dialogRef: MatDialogRef<ChangePasswordComponent>, private service: LoginService, private matSnackBar: MatSnackBar) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.service.getUserByUsername(this.service.currentUser).subscribe(\r\n      response => {\r\n        this.idOfUsername = response['id'];\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  form = new FormGroup(\r\n    {\r\n      currentPassword: new FormControl('', [Validators.required, Validators.minLength(8)]),\r\n      newPassword: new FormControl('', [Validators.required, Validators.minLength(8)]),\r\n      confirmPassword: new FormControl('', [Validators.required])\r\n    },\r\n    {\r\n      validators: this.checkIfMatchingPasswords('newPassword', 'confirmPassword')\r\n    }\r\n  );\r\n\r\n\r\n  checkIfMatchingPasswords(passwordKey: string, passwordConfirmationKey: string) {\r\n    return (group: FormGroup) => {\r\n      let passwordInput = group.controls[passwordKey];\r\n      let passwordConfirmationInput = group.controls[passwordConfirmationKey];\r\n      if (passwordConfirmationInput.value.toString().length === 0) {\r\n        passwordConfirmationInput.setErrors({required: true});\r\n\r\n      }\r\n      if (passwordInput.value !== passwordConfirmationInput.value) {\r\n        passwordConfirmationInput.setErrors({notEquivalent: true});\r\n        return {notEquivalent: true};\r\n      } else {\r\n        return null;\r\n      }\r\n    };\r\n  }\r\n\r\n  get currentPassword(): AbstractControl {\r\n    return this.form.get('currentPassword');\r\n  }\r\n\r\n  get newPassword(): AbstractControl {\r\n    return this.form.get('newPassword');\r\n  }\r\n\r\n  get confirmPassword(): AbstractControl {\r\n    return this.form.get('confirmPassword');\r\n  }\r\n\r\n  cancel(): void {\r\n\r\n    this.dialogRef.close();\r\n  }\r\n\r\n\r\n  isDisable(): boolean {\r\n    if (this.confirmPassword.invalid || this.newPassword.invalid || this.currentPassword.invalid) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  change(): void {\r\n\r\n    this.alertMessage = null;\r\n\r\n    if (this.newPassword.value === this.confirmPassword.value) {\r\n\r\n      let body = {\r\n        id: this.idOfUsername,\r\n        username: this.service.currentUser,\r\n        password: this.newPassword.value\r\n      };\r\n\r\n\r\n      this.service.changePassword(body).subscribe(\r\n        response => {\r\n          console.log(response);\r\n\r\n          this.dialogRef.close();\r\n          this.matSnackBar.open('Password changed successfully', 'close', {duration: 2000});\r\n        },\r\n        error => {\r\n          this.alertMessage = error.error.message;\r\n          console.log(error);\r\n\r\n        }\r\n      );\r\n\r\n\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n}\r\n\r\n","<form [formGroup]=\"form\">\r\n\r\n  <h1 class=\"color-black-medium\">change your password </h1>\r\n\r\n  <div *ngIf=\"alertMessage\" class=\"alert alert-danger\" role=\"alert\">{{alertMessage}}</div>\r\n  <mat-form-field appearance=\"outline\">\r\n    <mat-label>current password</mat-label>\r\n    <input matInput [type]=\"hideCurrent ? 'password' : 'text'\" formControlName=\"currentPassword\">\r\n    <button mat-icon-button matSuffix (mousedown)=\"hideCurrent = false\" (mouseup)=\"hideCurrent = true\"\r\n            aria-label=\"'Hide password'\">\r\n      <mat-icon>{{hideCurrent ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n    </button>\r\n    <mat-error>\r\n      <div *ngIf=\"currentPassword.hasError('required')\">you must Enter current password</div>\r\n\r\n      <div *ngIf=\"currentPassword.hasError('minlength')\">passworld shuld be minimum 8 characters</div>\r\n    </mat-error>\r\n\r\n\r\n  </mat-form-field>\r\n\r\n\r\n  <mat-form-field appearance=\"outline\">\r\n    <mat-label>new password</mat-label>\r\n    <input matInput [type]=\"hideNew ? 'password' : 'text'\" formControlName=\"newPassword\">\r\n    <button mat-icon-button matSuffix (mousedown)=\"hideNew = false\" (mouseup)=\"hideNew = true\"\r\n            aria-label=\"'Hide password'\">\r\n      <mat-icon>{{hideNew ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n    </button>\r\n    <mat-error>\r\n      <div *ngIf=\"newPassword.hasError('required')\">you must Enter new password</div>\r\n\r\n      <div *ngIf=\"newPassword.hasError('minlength')\">passworld shuld be minimum 8 characters</div>\r\n    </mat-error>\r\n\r\n  </mat-form-field>\r\n\r\n\r\n  <mat-form-field appearance=\"outline\">\r\n    <mat-label>confirm new password</mat-label>\r\n    <input matInput [type]=\"hideConfirm ? 'password' : 'text'\" formControlName=\"confirmPassword\">\r\n    <button mat-icon-button matSuffix (mousedown)=\"hideConfirm = false\" (mouseup)=\"hideConfirm = true\"\r\n            aria-label=\"'Hide password'\">\r\n      <mat-icon>{{hideConfirm ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n    </button>\r\n    <mat-error>\r\n      <div *ngIf=\"confirmPassword.hasError('required')\">you must confirm your password</div>\r\n      <div *ngIf=\"form.hasError('notEquivalent')\">Passwords do not match</div>\r\n    </mat-error>\r\n\r\n\r\n  </mat-form-field>\r\n\r\n\r\n  <div class=\"right\">\r\n    <button mat-raised-button [disabled]=\"isDisable()\"\r\n            class=\"background-primary-light1 color-white-high none-outline m-2\"\r\n            (click)=\"change()\">Change\r\n    </button>\r\n\r\n    <button mat-stroked-button class=\"color-primary none-outline\" (click)=\"cancel()\">Cancel</button>\r\n  </div>\r\n\r\n\r\n</form>\r\n\r\n","import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA} from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-confirm-delete-image',\n  templateUrl: './confirm-delete-image.component.html',\n  styleUrls: ['./confirm-delete-image.component.css']\n})\nexport class ConfirmDeleteImageComponent implements OnInit {\n  isForce: boolean = false;\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) {\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n","<h1 mat-dialog-title>Delete Images</h1>\n<div mat-dialog-content>\n  Are you sure to delete bottom Images from host with {{data.hostIp}} ip:\n  <ul *ngIf=\"!data.selectedImages.RepoTags\">\n    <li *ngFor=\"let image of data.selectedImages\">{{image.RepoTags[0]}}</li>\n  </ul>\n\n  <ul *ngIf=\"data.selectedImages.RepoTags\">\n    <li>{{data.selectedImages.RepoTags[0]}}</li>\n  </ul>\n</div>\n\n<mat-checkbox [(ngModel)]=\"isForce\">Force</mat-checkbox>\n\n<div mat-dialog-actions>\n  <button [mat-dialog-close]=\"undefined\" mat-button>No</button>\n  <button mat-button [mat-dialog-close]=\"isForce\" cdkFocusInitial>Yes</button>\n</div>\n","import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA} from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-confirm',\n  templateUrl: './confirm.component.html',\n  styleUrls: ['./confirm.component.css']\n})\nexport class ConfirmComponent implements OnInit {\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<h1 mat-dialog-title>{{data.title}}</h1>\n<div mat-dialog-content>{{data.content}}</div>\n\n\n<div mat-dialog-actions>\n  <button [mat-dialog-close]=\"undefined\" mat-button>No</button>\n  <button mat-button mat-dialog-close=\"yes\" cdkFocusInitial>Yes</button>\n</div>\n","import {Component, OnInit} from '@angular/core';\nimport {NetworkService} from '../../services/network/network.service';\nimport {FormControl, Validators} from '@angular/forms';\nimport {MatDialogRef} from '@angular/material/dialog';\n@Component({\n  selector: 'app-create-network',\n  templateUrl: './create-network.component.html',\n  styleUrls: ['./create-network.component.css']\n})\nexport class CreateNetworkComponent implements OnInit {\n\n  constructor(\n    private service: NetworkService,\n    private dialogRef: MatDialogRef<CreateNetworkComponent>,\n  ) {\n  }\n\n  hasError = false;\n  errorMessage: string;\n\n  public networkName = new FormControl('', [Validators.required]);\n\n\n  ngOnInit(): void {\n  }\n\n\n  public create(): void {\n\n    if (this.networkName.status === 'VALID') {\n      console.log(this.networkName.value);\n      this.service.createNetwork(this.networkName.value).subscribe(\n        response => {\n          this.dialogRef.close(response)\n        },\n        error => {\n          console.log(error.error.message);\n          this.errorMessage = error.error.message;\n          this.hasError = true;\n        }\n      );\n    }\n  }\n}\n","<h1 mat-dialog-title>Create network</h1>\n<div *ngIf=\"hasError\" class=\"alert alert-danger\">\n  {{errorMessage}}\n</div>\n<div mat-dialog-content>\n  <p>Please enter your new network name</p>\n  <mat-form-field appearance=\"standard\">\n    <mat-label>Network Name</mat-label>\n    <input required matInput autocomplete=\"off\" [formControl]=\"networkName\">\n  </mat-form-field>\n\n</div>\n<div mat-dialog-actions class=\"position pb-3\">\n  <button mat-button mat-dialog-close class=\"color-accent-light\">cancel</button>\n  <button mat-raised-button\n          class=\"background-accent-light color-white-high\"\n          [disabled]=\"networkName.status === 'INVALID'\"\n          (click)=\"create()\">Create\n  </button>\n</div>\n","import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {AbstractControl, FormArray, FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\nimport {HostService} from '../../services/host/host.service';\nimport {ToasterService} from 'angular2-toaster';\n\n@Component({\n  selector: 'app-edit-host',\n  templateUrl: './edit-host.component.html',\n  styleUrls: ['./edit-host.component.css']\n})\nexport class EditHostComponent implements OnInit {\n\n  /*form = new FormGroup(\n    {\n      name: new FormControl(),\n      role: new FormControl(),\n      Availability: new FormControl(),\n    }\n  );*/\n  formGroup: FormGroup;\n  labels: FormArray;\n\n\n  constructor(\n    private service: HostService,\n    private dialogRef: MatDialogRef<EditHostComponent>,\n    private toast: ToasterService,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    private formBuilder: FormBuilder\n  ) {\n  }\n\n  ngOnInit(): void {\n\n    // declare formGroup\n    this.formGroup = this.formBuilder.group({\n        name: new FormControl(),\n        role: new FormControl(),\n        availability: new FormControl(),\n        labels: this.formBuilder.array([]),\n      }\n    );\n\n    // add rows of labels\n    let hasLabel = false;\n    let labels = this.data.Spec.Labels;\n    for (const key in labels) {\n      hasLabel = true;\n      this.addLabel(key, labels[key]);\n    }\n\n    if (!hasLabel) {\n      this.addLabel(null, null);\n    }\n\n\n    // set value of properties\n\n    this.formGroup.patchValue({\n        name: this.data.Spec.Name,\n        role: this.data.Spec.Role,\n        availability: this.data.Spec.Availability,\n\n      });\n\n\n  }\n\n\n  private createLabel(key: string, value: string): FormGroup {\n    return this.formBuilder.group({\n      key: [key, Validators.required],\n      value: [value, Validators.required],\n    });\n  }\n\n  public addLabel(key: string, value: string): void {\n    this.labels = this.formGroup.get('labels') as FormArray;\n    this.labels.push(this.createLabel(key, value));\n  }\n\n  public getLabels(): AbstractControl[] {\n    return (this.formGroup.controls.labels as FormArray).controls;\n  }\n\n\n  public update(): void {\n    let labels = {};\n    for (const label of this.getLabels()) {\n      if (label.value.key) {\n        labels[label.value.key] = label.value.value;\n      }\n    }\n\n\n    let body = {\n      'Name': this.formGroup.controls.name.value,\n      'Role': this.formGroup.controls.role.value,\n      'Availability': this.formGroup.controls.availability.value,\n      'Labels': labels\n    };\n\n\n    this.service.getLastNodeVersion(this.data.ID).subscribe(\n      (response: any) => {\n\n        this.service.updateNode(this.data.ID, response.Index, body).subscribe(\n          response => {\n            this.toast.pop({\n              type: 'success',\n              timeout: 5000,\n              body: 'Edited Successfully',\n              showCloseButton: true\n            });\n            this.dialogRef.close(true);\n          }\n        );\n\n      }\n    );\n\n  }\n\n  protected removeLabel(i) {\n    this.getLabels().splice(i, 1);\n  }\n\n\n}\n","<mat-dialog-content>\n  <form [formGroup]=\"formGroup\" class=\"container background-gray p-3 \">\n\n    <!-- *********** Name **************** -->\n    <div class=\"row\">\n      <div class=\"col-3 label-center-vericall color-accent \">Name:</div>\n      <div class=\"col-9\">\n        <mat-form-field>\n          <mat-label>Name</mat-label>\n          <input matInput [formControl]=\"formGroup.controls.name\" type=\"text\">\n        </mat-form-field>\n      </div>\n    </div>\n\n\n    <!-- *********** Role **************** -->\n    <div class=\"row\">\n      <div class=\"col-3 label-center-vericall color-accent\">Role:</div>\n      <div class=\"col-9\">\n        <mat-form-field>\n          <mat-label>Role</mat-label>\n          <mat-select [formControl]=\"formGroup.controls.role\">\n            <mat-option value=\"manager\">manager</mat-option>\n            <mat-option value=\"worker\">worker</mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n    </div>\n\n\n    <!-- *********** Availability **************** -->\n    <div class=\"row\">\n      <div class=\"col-3 label-center-vericall color-accent\">Availability:</div>\n      <div class=\"col-9\">\n        <mat-form-field>\n          <mat-label>Availability</mat-label>\n          <mat-select [formControl]=\"formGroup.controls.availability\">\n            <mat-option value=\"active\">active</mat-option>\n            <mat-option value=\"pause\">pause</mat-option>\n            <mat-option value=\"drain\">drain</mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n    </div>\n\n\n    <!-- *********** Labels **************** -->\n    <div class=\"row\">\n      <div class=\"col-3 label-center-vericall color-accent\">Lablels:</div>\n      <div class=\"col-9 border\">\n\n        <!-- ***************  key and value ***************** -->\n        <div *ngFor=\"let labelControll of getLabels(); let i = index;\" class=\"row\">\n\n\n          <mat-form-field class=\"ml-4 label-key\">\n            <mat-label>key</mat-label>\n            <input [formControl]=\"labelControll.controls.key\" matInput>\n          </mat-form-field>\n\n\n          <mat-form-field class=\"ml-5 label-value\">\n            <mat-label>value</mat-label>\n            <input [formControl]=\"labelControll.controls.value\" matInput>\n          </mat-form-field>\n\n\n          <div class=\"label-btns pt-3 ml-3\">\n\n            <button mat-icon-button class=\"color-negetive\" (click)=\"removeLabel(i)\">\n              <mat-icon matTooltip=\"remove this label\" matTooltipPosition=\"above\">remove</mat-icon>\n            </button>\n\n\n          </div>\n        </div>\n\n        <button mat-icon-button\n                class=\"color-positive display\"\n                (click)=\"addLabel(null,null)\">\n          <mat-icon>add</mat-icon>\n        </button>\n\n      </div>\n    </div>\n\n  </form>\n</mat-dialog-content>\n\n<div class=\"btns-group mt-2\">\n  <button mat-button (click)=\"update()\" class=\"background-accent-light color-white-high mr-3 ml-3\">Update</button>\n  <button mat-button mat-dialog-close class=\"background-accent-light color-white-high ml-3 mr-3\">Cancel</button>\n</div>\n\n\n","import {Component, Inject, OnInit} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-json-view',\n  templateUrl: './json-view.component.html',\n  styleUrls: ['./json-view.component.css']\n})\nexport class JsonViewComponent implements OnInit {\n\n  constructor(\n    private dialogRef: MatDialogRef<JsonViewComponent>,\n    @Inject(MAT_DIALOG_DATA) public json: any\n  ) {\n  }\n\n\n  ngOnInit(): void {\n\n  }\n\n}\n","\n<div class=\"fix\">\n  <ngx-json-viewer [expanded]=\"true\" [json]=\"json\"></ngx-json-viewer>\n</div>\n","import {Component, Inject, OnInit} from '@angular/core';\nimport {AbstractControl, FormArray, FormBuilder, FormControl, FormGroup} from '@angular/forms';\nimport {ServiceMonitoringService} from '../../services/service-monitoring/service-monitoring.service';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {ToasterService} from 'angular2-toaster';\n\n@Component({\n  selector: 'app-service-form',\n  templateUrl: './service-form.component.html',\n  styleUrls: ['./service-form.component.css']\n})\nexport class ServiceFormComponent implements OnInit {\n\n  hasError = false;\n  errorMessage: string;\n  isUpdate = false;\n  isEditablePorts = true;\n  formGroup: FormGroup;\n  ports: FormArray;\n  networks: string[] = [];\n\n  constructor(\n    private toaster: ToasterService,\n    private dialog: MatDialogRef<ServiceFormComponent>,\n    private formBuilder: FormBuilder,\n    private service: ServiceMonitoringService,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.data;\n\n\n    //if edit mode\n    if (this.data.networks) {\n      this.networks = this.data.networks;\n    }\n\n    this.initFormGroup();\n\n\n    if (this.data.serviceId) {\n      this.isUpdate = true;\n    }\n\n  }\n\n  private initFormGroup() {\n\n    // if this.data.serviceName is NOT undefined=> edit Mode\n    // if this.data.serviceName is undefined => create Mode\n    if (this.data.serviceName != undefined) {\n\n      // if \"serviceId == null\" =>  service is \"default service\" and haven't image\n      if (this.data.serviceId == null) {\n        this.formGroup = this.initFGNoImage(this.data);\n      }\n\n      // if \"serviceId != null\" =>  service is \"default service\" and have image\n      else if (this.data.serviceId != null && this.service.isDefaultService(this.data.serviceName)) {\n        this.formGroup = this.initFGImage(this.data);\n      }\n\n      // other => serive is orginal => this service isn't \"default service\"\n      else {\n\n        this.formGroup = this.initFGEdit(this.data);\n\n      }\n\n    } else {\n      // declare formGroup for create\n      this.formGroup = this.initFGNormal();\n    }\n\n\n  }\n\n\n  // initialize formGroup when service isn't default service (for edit)\n  private initFGEdit(data): FormGroup {\n\n    let constraits: string[];\n    if (this.data.constraints[0]) {\n      constraits = this.data.constraints[0].split(':');\n      this.setNullIfBeNull(constraits);\n    }\n\n    /* //prepair ports\n     let portsFG: FormGroup[] = [];\n     if (data.ports) {\n       for (const port of data.ports) {\n         portsFG.push(this.createPort(port));\n       }\n     } else {\n       portsFG.push(this.createPort());\n     }*/\n\n    let portsFG = this.prepairPorts(data.ports);\n\n\n    return this.formBuilder.group({\n\n      name: new FormControl({value: this.data.serviceName, disabled: true}, []),\n\n      image: new FormControl({value: this.data.imageName, disabled: false}, []),\n      replicas: new FormControl({value: this.data.replicas.toString(), disabled: true}, []),\n      labelKey: new FormControl({value: constraits ? constraits[0] : null, disabled: false}, []),\n      labelValue: new FormControl({value: constraits ? constraits[1] : null, disabled: false}, []),\n      network: new FormControl(),\n      ports: this.formBuilder.array(portsFG),\n    });\n  }\n\n\n  // initialize formGroup when service is default service and has image (for edit)\n  private initFGImage(data): FormGroup {\n\n    let constraits: string[];\n    if (this.data.constraints[0]) {\n      constraits = this.data.constraints[0].split(':');\n      this.setNullIfBeNull(constraits);\n    }\n\n\n    /*//prepair ports\n    let portsFG: FormGroup[] = [];\n    for (const port of data.ports) {\n      portsFG.push(this.createPort(port, true));\n    }*/\n    let portsFG = this.prepairPorts(data.ports, true);\n\n    this.isEditablePorts = false;\n\n    return this.formBuilder.group({\n\n      name: new FormControl({value: this.data.serviceName, disabled: true}, []),\n\n      image: new FormControl({value: this.data.imageName, disabled: false}, []),\n      replicas: new FormControl({value: this.data.replicas.toString(), disabled: true}, []),\n      labelKey: new FormControl({value: constraits ? constraits[0] : null, disabled: true}, []),\n      labelValue: new FormControl({value: constraits ? constraits[1] : null, disabled: true}, []),\n      network: new FormControl(),\n      ports: this.formBuilder.array(portsFG),\n    });\n  }\n\n\n  // initialize formGroup when service is default service and haven't image\n  private initFGNoImage(data): FormGroup {\n    return this.formBuilder.group({\n      name: new FormControl({\n        value: this.data.serviceName,\n        disabled: true\n      }, []),\n      image: new FormControl(),\n      replicas: new FormControl(),\n      labelKey: new FormControl(),\n      labelValue: new FormControl(),\n      network: new FormControl(),\n      ports: this.formBuilder.array([this.createPort()]),\n    });\n  }\n\n\n  private initFGNormal(): FormGroup {\n    return this.formBuilder.group({\n        name: new FormControl(),\n        image: new FormControl(),\n        replicas: new FormControl(),\n        labelKey: new FormControl(),\n        labelValue: new FormControl(),\n        network: new FormControl(),\n        ports: this.formBuilder.array([this.createPort()]),\n      }\n    );\n  }\n\n\n  private prepairPorts(ports, disabled = false): FormGroup[] {\n    let portsFG: FormGroup[] = [];\n    if (ports) {\n      for (const port of ports) {\n        portsFG.push(this.createPort(port, disabled));\n      }\n    } else {\n      portsFG.push(this.createPort());\n    }\n\n    return portsFG;\n  }\n\n  private createPort(port?: any, disabled = false): FormGroup {\n    if (port) {\n      return this.formBuilder.group({\n        publishedPort: [{value: port.PublishedPort, disabled: disabled}],\n        targetPort: [{value: port.TargetPort, disabled: disabled}],\n      });\n\n    } else {\n      return this.formBuilder.group({\n        publishedPort: [],\n        targetPort: [],\n      });\n    }\n  }\n\n  public addPort(): void {\n    this.ports = this.formGroup.get('ports') as FormArray;\n    this.ports.push(this.createPort());\n  }\n\n  protected removePort(i): void {\n    this.getPorts().splice(i, 1);\n  }\n\n  public getPorts(): AbstractControl[] {\n    return (this.formGroup.controls.ports as FormArray).controls;\n  }\n\n  public onChangeCheckBox(checked, nameOfNetwork) {\n    if (checked) {\n      this.networks.push(nameOfNetwork);\n    } else {\n      let index = this.networks.indexOf(nameOfNetwork);\n      this.networks.splice(index, 1);\n    }\n\n  }\n\n  public isNetwork(name: string): boolean {\n    for (const network of this.networks) {\n      if (network === name) {\n        return true;\n      }\n    }\n\n\n    return false;\n  }\n\n  private generateBody(): any {\n    let body = {\n      name: this.formGroup.controls.name.value,\n      image: this.formGroup.controls.image.value,\n      constraints: {},\n      replicas: this.formGroup.controls.replicas.value,\n      ports: [],\n      networks: this.networks\n\n    };\n    body.constraints[this.formGroup.controls.labelKey.value] = this.formGroup.controls.labelValue.value;\n\n    for (let port of this.getPorts()) {\n      body.ports.push({\n        Protocol: 'tcp',\n        PublishedPort: port.value.publishedPort,\n        TargetPort: port.value.targetPort\n      });\n    }\n    return body;\n  }\n\n  private setNullIfBeNull(strs: string[]) {\n    for (let index in strs) {\n      if (strs[index].toLowerCase().trim() === 'null') {\n        strs[index] = null;\n      }\n\n    }\n\n  }\n\n\n  public update() {\n    const body = this.generateBody();\n\n    this.service.updateService(this.data.serviceId, body).subscribe(\n      response => {\n        this.toaster.pop({\n          type: 'success',\n          body: `the ${this.data.serviceName} service updated successfully`,\n          timeout: 5000,\n          showCloseButton: true\n        });\n        this.dialog.close(true);\n      },\n      error => {\n        console.log(error);\n        this.errorMessage = JSON.parse(error.error).message;\n        this.hasError = true;\n      },\n    );\n\n  }\n\n\n  private create() {\n    this.service.createService(this.generateBody()).subscribe(\n      response => {\n        this.toaster.pop({\n          type: 'success',\n          body: `the ${this.data.serviceName} service created successfully`,\n          timeout: 5000,\n          showCloseButton: true\n        });\n        this.dialog.close(true);\n      },\n      error => {\n        if (error) {\n          console.log(error.error.message);\n          this.hasError = true;\n          this.errorMessage = error.error.message;\n        }\n\n      }\n    );\n\n  }\n\n}\n","<mat-dialog-content>\n  <div *ngIf=\"hasError\" class=\"alert alert-danger\">{{errorMessage}}</div>\n  <form class=\"container background-gray\">\n\n    <!-- *********** Name **************** -->\n    <div class=\"row\">\n      <div class=\"col-3 label-center-vericall color-accent \">Name:</div>\n      <div class=\"col-9\">\n        <mat-form-field>\n          <mat-label>Name</mat-label>\n          <input [formControl]=\"formGroup.controls.name\" matInput type=\"text\">\n        </mat-form-field>\n      </div>\n    </div>\n\n\n    <!-- *********** Image **************** -->\n    <div class=\"row\">\n      <div class=\"col-3 label-center-vericall color-accent \">Image:</div>\n      <div class=\"col-9\">\n        <mat-form-field>\n          <mat-label>Image</mat-label>\n          <input [formControl]=\"formGroup.controls.image\" matInput type=\"text\">\n        </mat-form-field>\n      </div>\n    </div>\n\n\n    <!-- ********************** Constraint ***************** -->\n    <div class=\"row\">\n      <div class=\"col-3 label-center-vericall color-accent\">Lablels:</div>\n      <div class=\"col-9\">\n\n        <!-- ***************  key and value ***************** -->\n        <div class=\"row\">\n\n          <mat-form-field class=\"ml-4\">\n            <mat-label>key</mat-label>\n            <input [formControl]=\"formGroup.controls.labelKey\" type=\"text\" matInput>\n          </mat-form-field>\n\n          <mat-form-field class=\"ml-5\">\n            <mat-label>value</mat-label>\n            <input [formControl]=\"formGroup.controls.labelValue\" type=\"text\" matInput>\n          </mat-form-field>\n\n\n        </div>\n      </div>\n    </div>\n\n\n    <!-- ************* Replicas ******************* -->\n    <div class=\"row\">\n      <div class=\"col-3 label-center-vericall color-accent \">Replicas:</div>\n      <div class=\"col-9\">\n        <mat-form-field>\n          <mat-label>Replicas</mat-label>\n          <mat-select [formControl]=\"formGroup.controls.replicas\" [value]=\"formGroup.controls.replicas.value\">\n            <mat-option value=\"0\">shut down</mat-option>\n            <mat-option value=\"1\">1</mat-option>\n            <mat-option value=\"2\">2</mat-option>\n            <mat-option value=\"3\">3</mat-option>\n            <mat-option value=\"4\">4</mat-option>\n            <mat-option value=\"5\">5</mat-option>\n            <mat-option value=\"6\">6</mat-option>\n            <mat-option value=\"7\">7</mat-option>\n            <mat-option value=\"8\">8</mat-option>\n            <mat-option value=\"9\">9</mat-option>\n            <mat-option value=\"10\">10</mat-option>\n          </mat-select>\n        </mat-form-field>\n      </div>\n    </div>\n\n\n    <!-- **************** Ports ******************** -->\n    <div class=\"row\">\n      <div class=\"col-3 label-center-vericall color-accent\">Ports:</div>\n      <div class=\"col-9 border\">\n\n        <!-- ***************  PublishedPort and TargetPort ***************** -->\n        <div class=\"row mt-2\" *ngFor=\"let port of getPorts(); let i = index;\">\n          <mat-form-field class=\"ml-4 port-input\">\n          <mat-label>Publish port</mat-label>\n          <input [formControl]=\"port.controls.publishedPort\" type=\"number\" matInput>\n        </mat-form-field>\n\n          <mat-form-field class=\"ml-5 port-input\">\n            <mat-label>Target port</mat-label>\n            <input [formControl]=\"port.controls.targetPort\" type=\"number\" matInput>\n          </mat-form-field>\n\n          <div class=\"label-btns pt-3 ml-3\">\n\n            <button [disabled]=\"!isEditablePorts\" mat-icon-button class=\"color-negetive\"\n                    (click)=\"removePort(i)\">\n              <mat-icon matTooltip=\"remove this label\" matTooltipPosition=\"above\">remove</mat-icon>\n            </button>\n\n\n          </div>\n        </div>\n\n        <button [disabled]=\"!isEditablePorts\" mat-icon-button class=\"color-positive add-btn\" (click)=\"addPort()\">\n          <mat-icon>add</mat-icon>\n        </button>\n\n      </div>\n    </div>\n\n\n    <!-- **************** Networks ******************** -->\n    <div class=\"row\">\n      <div class=\"col-3 label-center-vericall color-accent\">Select networks:</div>\n      <div class=\"col-9 border\">\n\n        <ul class=\"networks-list mt-2\">\n          <li *ngFor=\"let name of data.checkboxItems\">\n            <mat-checkbox [checked]=\"isNetwork(name)\" [disabled]=\"isUpdate\"\n                          (change)=\"onChangeCheckBox($event.checked,name)\">{{name}}</mat-checkbox>\n          </li>\n        </ul>\n\n\n      </div>\n    </div>\n\n\n  </form>\n</mat-dialog-content>\n\n<div class=\"btns-group mt-2\">\n  <button *ngIf=\"isUpdate\" mat-button class=\"background-accent-light color-white-high mr-3 ml-3\" (click)=\"update()\">\n    Update\n  </button>\n\n  <button *ngIf=\"!isUpdate\" mat-button class=\"background-accent-light color-white-high mr-3 ml-3\" (click)=\"create()\">\n    Create\n  </button>\n\n  <button mat-button mat-dialog-close class=\"background-accent-light color-white-high ml-3 mr-3\">Cancel</button>\n</div>\n\n\n","import {NgModule} from '@angular/core';\r\nimport {RouterModule, Routes} from '@angular/router';\r\nimport {DashboardComponent} from './components/dashboard/dashboard.component';\r\nimport {ServiceMonitoringComponent} from './components/service-monitoring/service-monitoring.component';\r\nimport {LogManagementComponent} from './components/log-management/log-management.component';\r\nimport {UserManagementComponent} from './components/user-management/user-management.component';\r\nimport {LoginComponent} from './components/login/login.component';\r\nimport {MainComponent} from './components/main/main.component';\r\nimport {AuthGuardService} from './services/auth-guard/auth-guard.service';\r\nimport {PieChartComponent} from './components/pie-chart/pie-chart.component';\r\nimport {ImageComponent} from './components/image/image.component';\r\nimport {NetworkComponent} from './components/network/network.component';\r\nimport {HostComponent} from './components/host/host.component';\r\nimport {NodesNetworkManagementComponent} from './components/nodes-network-management/nodes-network-management.component';\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: 'home', component: MainComponent, canActivate: [AuthGuardService], children: [\r\n      {path: 'dashboard', component: DashboardComponent},\r\n      {path: 'service-monitoring', component: ServiceMonitoringComponent},\r\n      {path: 'log-management', component: LogManagementComponent},\r\n      {path: 'user-management', component: UserManagementComponent},\r\n      {path: 'pie', component: PieChartComponent},\r\n      {path: 'image', component: ImageComponent},\r\n      {path: 'host', component: HostComponent},\r\n      {path: 'network', component: NetworkComponent},\r\n      {path: 'nodes-network-management', component: NodesNetworkManagementComponent}\r\n    ]\r\n  },\r\n  {path: '', redirectTo: '/home/service-monitoring', pathMatch: 'full'},\r\n  {path: 'login', component: LoginComponent}\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule {\r\n}\r\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'sina server manager';\n}\n","<router-outlet ></router-outlet>\r\n<app-waite-mode></app-waite-mode>\r\n\r\n","import {BrowserModule} from '@angular/platform-browser';\r\nimport {NgModule} from '@angular/core';\r\n\r\nimport {AppRoutingModule} from './app-routing.module';\r\nimport {AppComponent} from './app.component';\r\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\r\nimport {ToolbarComponent} from './components/toolbar/toolbar.component';\r\nimport {SidebarComponent} from './components/sidebar/sidebar.component';\r\nimport {DashboardComponent} from './components/dashboard/dashboard.component';\r\nimport {ServiceMonitoringComponent} from './components/service-monitoring/service-monitoring.component';\r\nimport {LogManagementComponent} from './components/log-management/log-management.component';\r\nimport {PanelComponent} from './components/panel/panel.component';\r\nimport {DashboardCardComponent} from './components/dashboard-card/dashboard-card.component';\r\nimport {UserManagementComponent} from './components/user-management/user-management.component';\r\nimport {ExpansionsUserManagementComponent} from './components/expansions-user-management/expansions-user-management.component';\r\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\nimport {LoginComponent} from './components/login/login.component';\r\nimport {MainComponent} from './components/main/main.component';\r\nimport {AdvanceSearchFormComponent} from './components/advance-search-form/advance-search-form.component';\r\nimport {TableLogManagementComponent} from './components/table-log-management/table-log-management.component';\r\nimport {Information} from '../Information';\r\nimport {HTTP_INTERCEPTORS, HttpClientModule} from '@angular/common/http';\r\nimport {WaitModeComponent} from './components/wait-mode/wait-mode.component';\r\nimport {SpinnerInterceptor} from './interceptors/spinner.interceptor';\r\nimport {UnauthorizedInterceptor} from './interceptors/unauthorized.interceptor';\r\nimport {ImageComponent} from './components/image/image.component';\r\nimport {DragAndDropFileComponent} from './components/drag-and-drop-file/drag-and-drop-file.component';\r\nimport {ToasterModule} from 'angular2-toaster';\r\nimport {FontAwesomeModule} from '@fortawesome/angular-fontawesome';\r\nimport {ConfirmDeleteImageComponent} from './Modal/confirm-delete-image/confirm-delete-image.component';\r\nimport {TableExpansionsServiceMonitoringComponent} from './components/table-expansions-service-monitoring/table-expansions-service-monitoring.component';\r\nimport {NetworkComponent} from './components/network/network.component';\r\nimport {CreateNetworkComponent} from './Modal/create-network/create-network.component';\r\nimport {HostComponent} from './components/host/host.component';\r\nimport {JsonViewComponent} from './Modal/json-view/json-view.component';\r\nimport {NgxJsonViewerModule} from 'ngx-json-viewer';\r\nimport {EditHostComponent} from './Modal/edit-host/edit-host.component';\r\nimport {ServiceFormComponent} from './Modal/service-form/service-form.component';\r\n\r\n\r\nimport {MatToolbarModule} from '@angular/material/toolbar';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {MatSidenavModule} from '@angular/material/sidenav';\r\nimport {MatListModule} from '@angular/material/list';\r\nimport {MatCardModule} from '@angular/material/card';\r\nimport {MatExpansionModule} from '@angular/material/expansion';\r\nimport {MatTableModule} from '@angular/material/table';\r\nimport {MatMenuModule} from '@angular/material/menu';\r\nimport {MatDialogModule} from '@angular/material/dialog';\r\nimport {ChangePasswordComponent} from './Modal/change-password/change-password.component';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport {MatSelectModule} from '@angular/material/select';\r\nimport {PieChartComponent} from './components/pie-chart/pie-chart.component';\r\nimport {MatDatepickerModule} from '@angular/material/datepicker';\r\nimport {MatNativeDateModule} from '@angular/material/core';\r\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\r\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\r\nimport {MatPaginatorModule} from '@angular/material/paginator';\r\nimport {MatTooltipModule} from '@angular/material/tooltip';\r\nimport {MatCheckboxModule} from '@angular/material/checkbox';\r\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\r\nimport {MatChipsModule} from '@angular/material/chips';\r\nimport {ConfirmComponent} from './Modal/confirm/confirm.component';\r\nimport {NodesNetworkManagementComponent} from './components/nodes-network-management/nodes-network-management.component';\r\nimport {DatePipe} from '@angular/common';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    ToolbarComponent,\r\n    SidebarComponent,\r\n    DashboardComponent,\r\n    ServiceMonitoringComponent,\r\n    LogManagementComponent,\r\n    PanelComponent,\r\n    DashboardCardComponent,\r\n    UserManagementComponent,\r\n    ExpansionsUserManagementComponent,\r\n    ChangePasswordComponent,\r\n    LoginComponent,\r\n    MainComponent,\r\n    PieChartComponent,\r\n    AdvanceSearchFormComponent,\r\n    TableLogManagementComponent,\r\n    WaitModeComponent,\r\n    ConfirmComponent,\r\n    ImageComponent,\r\n    DragAndDropFileComponent,\r\n    ConfirmDeleteImageComponent,\r\n    TableExpansionsServiceMonitoringComponent,\r\n    NetworkComponent,\r\n    CreateNetworkComponent,\r\n    HostComponent,\r\n    JsonViewComponent,\r\n    EditHostComponent,\r\n    ServiceFormComponent,\r\n    NodesNetworkManagementComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    HttpClientModule,\r\n    FontAwesomeModule,\r\n    NgxJsonViewerModule,\r\n    ToasterModule.forRoot(),\r\n\r\n    MatToolbarModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatSidenavModule,\r\n    MatListModule,\r\n    MatCardModule,\r\n    MatExpansionModule,\r\n    MatTableModule,\r\n    MatMenuModule,\r\n    MatDialogModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatProgressSpinnerModule,\r\n    MatSnackBarModule,\r\n    MatPaginatorModule,\r\n    MatTooltipModule,\r\n    MatCheckboxModule,\r\n    MatProgressBarModule,\r\n    MatChipsModule\r\n  ],\r\n  providers: [\r\n    DatePipe,\r\n    Information,\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: SpinnerInterceptor,\r\n      multi: true\r\n    },\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: UnauthorizedInterceptor,\r\n      multi: true\r\n    }\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {\r\n}\r\n","import {Component, EventEmitter, OnInit, Output} from '@angular/core';\r\nimport {AbstractControl, FormArray, FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {DatePipe} from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-advance-search-form',\r\n  templateUrl: './advance-search-form.component.html',\r\n  styleUrls: ['./advance-search-form.component.css']\r\n})\r\nexport class AdvanceSearchFormComponent implements OnInit {\r\n\r\n  @Output() advance = new EventEmitter();\r\n  @Output() clearAdvance = new EventEmitter();\r\n\r\n  constructor(private formBuilder: FormBuilder, private datepipe: DatePipe) {\r\n  }\r\n\r\n  formGroup: FormGroup;\r\n  items: FormArray;\r\n\r\n  ngOnInit(): void {\r\n\r\n    this.formGroup = this.formBuilder.group({\r\n        items: this.formBuilder.array([this.createItem()]),\r\n      }\r\n    );\r\n\r\n\r\n  }\r\n\r\n  createItem(): FormGroup {\r\n    return this.formBuilder.group({\r\n      keyWord: [null, Validators.required],\r\n      searchField: [null, Validators.required],\r\n      fromDate: [null, Validators.required],\r\n      toDate: [null, Validators.required],\r\n      field: [null, Validators.required]\r\n    });\r\n  }\r\n\r\n  getItems(): AbstractControl[] {\r\n    return (this.formGroup.get('items') as FormArray).controls;\r\n  }\r\n\r\n  addItem(): void {\r\n    this.items = this.formGroup.get('items') as FormArray;\r\n    this.items.push(this.createItem());\r\n  }\r\n\r\n\r\n  valueChange(item): void {\r\n    if (item.field.value === 'date') {\r\n      item.searchField.value = null;\r\n    } else if (item.field.value === 'content' || item.field.value === 'source') {\r\n      item.toDate.value = null;\r\n      item.fromDate.value = null;\r\n    }\r\n  }\r\n\r\n\r\n  clearRow(i): void {\r\n    this.getItems().splice(i, 1);\r\n  }\r\n\r\n\r\n  isInvalid(item, index): boolean {\r\n    if (item.field.invalid) {\r\n      return true;\r\n    }\r\n\r\n    if (item.keyWord.invalid && index !== 0) {\r\n      return true;\r\n    }\r\n\r\n    if ((item.searchField.invalid || item.searchField.value === null)\r\n      && ((item.fromDate.invalid || item.fromDate.value === null) && (item.toDate.invalid || item.toDate.value === null))) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n\r\n  clearAdvaceSearch(): void {\r\n    this.clearAdvance.emit();\r\n  }\r\n\r\n\r\n  isWorkAdvanceSearch(): boolean {\r\n\r\n    for (let i = 0; i < this.getItems().length; i++) {\r\n      let item = (this.getItems()[i] as FormGroup).controls;\r\n\r\n      if (this.isInvalid(item, i)) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n\r\n  advanceSearch(): void {\r\n\r\n    /* if inputs are valid */\r\n    if (!this.isWorkAdvanceSearch()) {\r\n      return;\r\n    }\r\n\r\n    console.log(JSON.stringify(this.createQuery()));\r\n\r\n    this.advance.emit(this.createQuery());\r\n\r\n  }\r\n\r\n\r\n  private createQueryString(field: string, searchField: string) {\r\n    let innerQuery = {};\r\n    innerQuery[field] = {'$eq': searchField};\r\n    return innerQuery;\r\n  }\r\n\r\n  private createRange(from ?: string, to ?: string) {\r\n\r\n    let innerQuery = {};\r\n    let times = [];\r\n    if (from) {\r\n      times.push({'time': {'$gt': `new Date(${this.datepipe.transform(from, 'EEE MMM dd yyyy HH:mm:ss z')})`}});\r\n    }\r\n\r\n    if (to) {\r\n      times.push({'time': {'$lt': `new Date(${this.datepipe.transform(to, 'EEE MMM dd yyyy HH:mm:ss z')})`}});\r\n    }\r\n    innerQuery['$and'] = times;\r\n    return innerQuery;\r\n\r\n  }\r\n\r\n\r\n  private createQuery() {\r\n\r\n    let query = {\r\n\r\n    };\r\n\r\n    if (this.getItems().length === 1) {\r\n      let item = (this.getItems()[0] as FormGroup).controls;\r\n      query = this.pushItems(query, item);\r\n    }\r\n\r\n    for (let i = 1; i < this.getItems().length; i++) {\r\n\r\n\r\n      let item2 = (this.getItems()[i] as FormGroup).controls;\r\n\r\n      if (i < 2) {\r\n        let item1 = (this.getItems()[i - 1] as FormGroup).controls;\r\n        query = this.pushItems(query, item1, item2);\r\n      } else {\r\n        query = this.pushMainQueryAndItem(query, item2);\r\n      }\r\n\r\n    }\r\n\r\n    return query;\r\n\r\n  }\r\n\r\n\r\n  private pushItems(query: any, item1: any, item2?: any) {\r\n\r\n    if (item2 == null) {\r\n      if (item1.field.value === 'date') {\r\n        query = this.createRange(item1.fromDate.value, item1.toDate.value);\r\n      } else {\r\n        query = this.createQueryString(item1.field.value, item1.searchField.value);\r\n      }\r\n      return query;\r\n    } else if (item2 != null) {\r\n      // item1.field = 'date'\r\n      if (item1.field.value === 'date') {\r\n      } else {  //   item1.field != 'date'\r\n        if (item2.field.value === 'date') { //   item1.field != 'date'  &&  item2.field = 'date'\r\n        } else { //   item1.field != 'date'  &&  item2.field != 'date'\r\n          query[`$${item2.keyWord.value}`] = [\r\n            this.createQueryString(item1.field.value, item1.searchField.value),\r\n            this.createQueryString(item2.field.value, item2.searchField.value)\r\n          ];\r\n        }\r\n      }\r\n      return query;\r\n    }\r\n\r\n  }\r\n\r\n\r\n  private pushMainQueryAndItem(query, item) {\r\n    let mainQuery = {};\r\n\r\n    if (item.field.value === 'date') { // item1.field = 'date'\r\n\r\n    } else { // // item1.field != 'date'\r\n\r\n      mainQuery[`$${item.keyWord.value}`] = [query, this.createQueryString(item.field.value, item.searchField.value)];\r\n\r\n    }\r\n    return mainQuery;\r\n  }\r\n\r\n  /*private pushItems(mainQuery: any, item1: any, item2?: any) {\r\n\r\n    if (item2 == null) {\r\n\r\n      if (item1.field.value === 'date') {\r\n\r\n        mainQuery.bool['must'] = [this.createRange(item1.fromDate.value, item1.toDate.value)];\r\n\r\n      } else {\r\n\r\n        mainQuery.bool['must'] = [this.createQueryString(item1.searchField.value, item1.field.value)];\r\n\r\n      }\r\n\r\n      return mainQuery;\r\n\r\n    } else if (item2 != null) {\r\n\r\n\r\n      let keyWord = (item2.keyWord.value === 'And') ? 'must' : 'should';\r\n\r\n      // item1.field = 'date'\r\n      if (item1.field.value === 'date') {\r\n\r\n        if (item2.field.value === 'date') { //   item1.field = 'date'  &&  item2.field = 'date'\r\n\r\n          mainQuery.bool[keyWord] = [\r\n            this.createRange(item1.fromDate.value, item1.toDate.value),\r\n            this.createRange(item2.fromDate.value, item2.toDate.value)\r\n          ];\r\n\r\n        } else { //   item1.field = 'date'  &&  item2.field != 'date'\r\n          mainQuery.bool[keyWord] = [\r\n            this.createRange(item1.fromDate.value, item1.toDate.value),\r\n            this.createQueryString(item2.searchField.value, item2.field.value)\r\n          ];\r\n        }\r\n\r\n      } else {  //   item1.field != 'date'\r\n\r\n        if (item2.field.value === 'date') { //   item1.field != 'date'  &&  item2.field = 'date'\r\n          mainQuery.bool[keyWord] = [\r\n            this.createQueryString(item1.searchField.value, item1.field.value),\r\n            this.createRange(item2.fromDate.value, item2.toDate.value)\r\n          ];\r\n        } else { //   item1.field != 'date'  &&  item2.field != 'date'\r\n          mainQuery.bool[keyWord] = [\r\n            this.createQueryString(item1.searchField.value, item1.field.value),\r\n            this.createQueryString(item2.searchField.value, item2.field.value)\r\n          ];\r\n\r\n        }\r\n\r\n      }\r\n      return mainQuery;\r\n\r\n    }\r\n\r\n  }*/\r\n\r\n  /*private createQuery() {\r\n    let mainQuery = {\r\n      'bool': {}\r\n    };\r\n\r\n    if (this.getItems().length === 1) {\r\n      let item = (this.getItems()[0] as FormGroup).controls;\r\n      mainQuery = this.pushItems(mainQuery, item);\r\n    } else {\r\n      for (let i = 1; i < this.getItems().length; i++) {\r\n\r\n        let item2 = (this.getItems()[i] as FormGroup).controls;\r\n\r\n        if (i < 2) {\r\n          let item1 = (this.getItems()[i - 1] as FormGroup).controls;\r\n          mainQuery = this.pushItems(mainQuery, item1, item2);\r\n        } else {\r\n          mainQuery = this.pushMainQueryAndItem(mainQuery, item2);\r\n        }\r\n\r\n\r\n      }\r\n\r\n    }\r\n    return mainQuery;\r\n\r\n  }*/\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","<div class=\"p-4\">\r\n\r\n\r\n  <form autocomplete=\"off\" [formGroup]=\"formGroup\">\r\n\r\n    <div formArrayName=\"items\" *ngFor=\"let item of getItems(); let i = index;\">\r\n\r\n\r\n      <div class=\"row center\">\r\n\r\n\r\n        <mat-form-field appearance=\"outline\" *ngIf=\"(i+1) !== 1\" class=\"col-2\">\r\n          <mat-label>key word</mat-label>\r\n          <mat-select required [formControl]=\"getItems()[i].controls.keyWord\">\r\n            <mat-option value=\"and\">And</mat-option>\r\n            <mat-option value=\"or\">Or</mat-option>\r\n          </mat-select>\r\n          <mat-error>compelete this field</mat-error>\r\n        </mat-form-field>\r\n\r\n        <div *ngIf=\"(i+1) === 1\" class=\"col-2\"></div>\r\n\r\n\r\n        <mat-form-field appearance=\"outline\" *ngIf=\"getItems()[i].value.field !== 'date'\" class=\"col-3\">\r\n          <mat-label>Enter search</mat-label>\r\n          <input matInput required [formControl]=\"getItems()[i].controls.searchField\" type=\"text\">\r\n          <mat-error>compelete this field</mat-error>\r\n        </mat-form-field>\r\n\r\n\r\n        <div\r\n          class=\"col-3\"\r\n          *ngIf=\"getItems()[i].value.field === 'date'\">\r\n\r\n          <mat-form-field appearance=\"outline\" class=\"col-6\">\r\n            <mat-label>from</mat-label>\r\n            <input matInput [formControl]=\"getItems()[i].controls.fromDate\" [matDatepicker]=\"from\">\r\n            <mat-datepicker-toggle matSuffix [for]=\"from\"></mat-datepicker-toggle>\r\n            <mat-datepicker #from></mat-datepicker>\r\n            <mat-error *ngIf=\"getItems()[i].controls.toDate.invalid && getItems()[i].controls.fromDate.invalid\">\r\n              You must fill in at least one of the fields\r\n            </mat-error>\r\n          </mat-form-field>\r\n\r\n\r\n          <mat-form-field appearance=\"outline\" class=\"col-6\">\r\n            <mat-label>to</mat-label>\r\n            <input matInput [formControl]=\"getItems()[i].controls.toDate\" [matDatepicker]=\"to\">\r\n            <mat-datepicker-toggle matSuffix [for]=\"to\"></mat-datepicker-toggle>\r\n            <mat-datepicker #to></mat-datepicker>\r\n            <mat-error *ngIf=\"getItems()[i].controls.toDate.invalid && getItems()[i].controls.fromDate.invalid\">\r\n              You must fill in at least one of the fields\r\n            </mat-error>\r\n          </mat-form-field>\r\n\r\n        </div>\r\n\r\n\r\n        <!--<span class=\"color-black-medium col-1 in\"> In </span>-->\r\n\r\n        <div class=\"col-1\">\r\n          <div class=\"in\">In</div>\r\n        </div>\r\n\r\n\r\n        <mat-form-field appearance=\"outline\" class=\"col-2\">\r\n          <mat-label>Field</mat-label>\r\n          <mat-select (selectionChange)=\"valueChange(getItems()[i].controls ,i)\" required\r\n                      [formControl]=\"getItems()[i].controls.field\">\r\n            <mat-option value=\"host\">host</mat-option>\r\n            <mat-option value=\"ident\">ident</mat-option>\r\n            <mat-option value=\"message\">message</mat-option>\r\n            <mat-option value=\"priority\">priority</mat-option>\r\n            <mat-option value=\"facilityLevel\">facilityLevel</mat-option>\r\n            <mat-option value=\"hostsource\">hostsource</mat-option>\r\n            <mat-option value=\"date\">time</mat-option>\r\n          </mat-select>\r\n          <mat-error>compelete this field</mat-error>\r\n        </mat-form-field>\r\n\r\n\r\n        <div class=\"btns col-2\">\r\n\r\n          <button class=\"col-6\" [class.invisible]=\"(i+1) !== getItems().length\" mat-mini-fab\r\n                  [disabled]=\"isInvalid(getItems()[i].controls,i)\"\r\n                  (click)=\"addItem()\">\r\n            <mat-icon>add</mat-icon>\r\n          </button>\r\n\r\n          <button  class=\"col-6\" mat-mini-fab class=\"background-accent-light\" (click)=\"clearRow(i)\"\r\n                  [class.invisible]=\"getItems().length == 1\">\r\n            <mat-icon class=\"color-negetive\">remove</mat-icon>\r\n          </button>\r\n\r\n          <!--<button mat-raised-button>\r\n            <mat-icon>add</mat-icon>\r\n          </button>\r\n\r\n          <button mat-raised-button >\r\n            <mat-icon>remove</mat-icon>\r\n          </button>\r\n-->\r\n\r\n\r\n        </div>\r\n\r\n\r\n      </div>\r\n\r\n    </div>\r\n\r\n  </form>\r\n\r\n\r\n  <div class=\"center mt-3\">\r\n\r\n\r\n    <button mat-raised-button class=\"background-accent-light color-white-high mr-5 col-1\" (click)=\"advanceSearch()\"\r\n            [disabled]=\"!isWorkAdvanceSearch()\">\r\n      Search\r\n    </button>\r\n\r\n\r\n    <button mat-button class=\"color-accent-light size my-hover none-outline\" (click)=\"clearAdvaceSearch()\">\r\n      clear form\r\n    </button>\r\n\r\n  </div>\r\n</div>\r\n","import {Component, Input, OnInit} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-dashboard-card',\r\n  templateUrl: './dashboard-card.component.html',\r\n  styleUrls: ['./dashboard-card.component.css']\r\n})\r\nexport class DashboardCardComponent implements OnInit {\r\n\r\n  @Input() percentage: number;\r\n  @Input() title: string;\r\n  @Input() content: string;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  getColor(): string {\r\n\r\n    if (this.percentage < 30) {\r\n      return 'var(--my-positive)';\r\n    } else if ((this.percentage >= 30) && (this.percentage < 50)) {\r\n      return 'var(--my-accent-light)';\r\n    } else if ((this.percentage >= 50) && (this.percentage < 70)) {\r\n      return 'var(--my-accent)';\r\n    } else if (this.percentage >= 70) {\r\n      return 'var(--my-negetive)';\r\n    }\r\n\r\n  }\r\n}\r\n","<div class=\"background-primary-light1-with-opacity box\">\r\n\r\n  <div class=\"pie-chart\">\r\n    <app-pie-chart [percentage]=\"percentage\" [color]=\"getColor()\"></app-pie-chart>\r\n  </div>\r\n\r\n  <div class=\"text\">\r\n    <div [style.color]=\"percentage >= 70 ? getColor(): null\" class=\"title\">{{title}}</div>\r\n    <div [style.color]=\"percentage >= 70 ? getColor(): null\" class=\"content\">{{content}}</div>\r\n  </div>\r\n\r\n</div>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {DashboardService} from '../../services/dashboard/dashboard.service';\r\nimport {Dashboard} from '../../interfaces/Dashboard';\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrls: ['./dashboard.component.css']\r\n})\r\nexport class DashboardComponent implements OnInit {\r\n\r\n  items: Dashboard[];\r\n\r\n  constructor(private service: DashboardService) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.service.getElement().subscribe(\r\n      response => {\r\n        this.items = response;\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n","<app-panel>\r\n  <ng-container class=\"header\">\r\n    Server Main\r\n  </ng-container>\r\n  <ng-container class=\"body\">\r\n    <div class=\"d-flex justify-content-between flex-wrap align-content-start\">\r\n      <app-dashboard-card *ngFor=\"let item of items\" [percentage]=\"item.percentage\" [title]=\"item.title\"\r\n                          [content]=\"item.content\"></app-dashboard-card>\r\n    </div>\r\n  </ng-container>\r\n</app-panel>\r\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {ImageService} from '../../services/image/image.service';\nimport {faDocker} from '@fortawesome/free-brands-svg-icons';\n\n@Component({\n  selector: 'app-drag-and-drop-file',\n  templateUrl: './drag-and-drop-file.component.html',\n  styleUrls: ['./drag-and-drop-file.component.css'],\n\n})\nexport class DragAndDropFileComponent implements OnInit {\n\n\n  fileList = [];\n  filestack = [];\n  fatBorder = false;\n  noDrop = false;\n  faDocker = faDocker;\n\n  private _host: string;\n  @Output() afterUpload = new EventEmitter();\n  @Output() beforeUpload = new EventEmitter();\n  @Output() onCancellUploading = new EventEmitter();\n\n  @Input() set host(h: string) {\n    this.filestack = [];\n    this.fileList = [];\n    this._host = h;\n  }\n\n  get host() {\n    return this._host;\n  }\n\n  constructor(public service: ImageService) {\n  }\n\n  ngOnInit(): void {\n\n  }\n\n  fileInputMethod(files) {\n    if (!this.service.updating) {\n      this.handleFiles(files);\n    }\n  }\n\n  onDrop(event) {\n\n    event.preventDefault();\n    if (!this.service.updating) {\n      const files = event.dataTransfer.files;\n      this.handleFiles(files);\n    }\n  }\n\n  onDragOver(event) {\n\n    event.stopPropagation();\n    event.preventDefault();\n\n  }\n\n\n  onDragEnter() {\n    this.fatBorder = true;\n  }\n\n\n  private handleFiles(files) {\n\n    for (let file of files) {\n      file.value = 0;\n      file.iscompeleted = false;\n      file.isTar = true;\n      this.fileList.push(file);\n      this.filestack.push(file);\n    }\n\n    this.filestack.reverse();\n\n\n    if (this.filestack.length > 0) {\n      this.upload();\n    }\n\n  }\n\n  private upload() {\n    const file = this.filestack.pop();\n    if (file) {\n      const x = file.name.split('.');\n      if (x[x.length - 1] === 'tar') {\n\n\n        this.beforeUpload.emit();\n        file.http = this.service.uploadFile(file, this.host).subscribe(\n          (response: any) => {\n            file.value = (100 * (response.loaded / response.total)).toFixed();\n          },\n          error => {\n            console.log(error);\n          },\n          () => {\n            file.iscompeleted = true;\n            this.afterUpload.emit({type: 'success', message: `the ${file.name} file was uploaded successfully`});\n            if (this.filestack.length > 0) {\n              this.upload();\n            }\n          }\n        );\n\n      } else {\n        file.isTar = false;\n        this.afterUpload.emit({type: 'error', message: 'You can only upload tar files'});\n        if (this.filestack.length > 0) {\n          this.upload();\n        }\n      }\n    }\n  }\n\n\n  cancel(file: any) {\n\n    if (file.http) {\n      file.http.unsubscribe();\n      this.onCancellUploading.emit();\n      this.upload();\n    }\n\n    let index = this.filestack.indexOf(file);\n    this.filestack.splice(index, 1);\n\n    index = this.fileList.indexOf(file);\n    this.fileList.splice(index, 1);\n\n\n  }\n\n\n\n}\n\n","<div class=\"dropzone mat-elevation-z1 background-gray-white\" (drop)=\"onDrop($event)\"\n     (dragover)=\"onDragOver($event)\" (inputFile)=\"fileInputMethod($event)\">\n\n  <div class=\"my-border background-gray pb-4\">\n    <div class=\"center\">\n      <mat-icon class=\"color-accent-light my-font mt-3\">cloud_upload</mat-icon>\n      <h1 class=\"color-black-dis able\">Drag & drop files here</h1>\n\n      <p class=\"color-black-disable\">or</p>\n\n      <button class=\"background-accent-light color-white-high mt-2\" mat-button [disabled]=\"service.updating\"\n              (click)=\"fileList=[]; fileInput.click()\">\n        <span>Browse</span>\n        <input mat-raised-button hidden multiple accept=\".tar\"\n               type=\"file\" #fileInput (change)=\"fileInputMethod($event.target.files)\" style=\"display:none\"/>\n      </button>\n\n    </div>\n\n  </div>\n\n  <!--      List of files that want to upload       -->\n\n  <div *ngIf=\"fileList.length > 0\" class=\"mt-3\">\n\n\n\n    <div class=\"position-relative pt-1 pb-1 hover\" *ngFor=\"let file of fileList\">\n\n      <fa-icon [icon]=\"faDocker\" [border]=\"true\" size=\"2x\"\n               [ngClass]=\"{\n               'color-black-high' : file.iscompeleted,\n               'color-black-medium' : !file.iscompeleted\n               }\"></fa-icon>\n\n      <div class=\"file-name\">\n\n        <dive class=\"mat-small ml-3 mt-2\"\n              [ngClass]=\"{\n               'color-black-high' : file.iscompeleted,\n               'color-black-medium' : !file.iscompeleted\n               }\">{{file.name}}</dive>\n\n        <dive *ngIf=\"file.iscompeleted\" class=\"ml-1 \">\n          <mat-icon class=\"color-positive done\">done</mat-icon>\n        </dive>\n\n\n        <dive *ngIf=\"!file.isTar\" class=\"ml-1 \">\n          <mat-icon matTooltip=\"You can only upload tar files\"  matTooltipClass=\"tooltip-red\" class=\"color-negetive done\">error</mat-icon>\n        </dive>\n\n\n      </div>\n\n\n      <span class=\"color-black-medium percent mat-small\">\n                <span *ngIf=\"!file.iscompeleted && file.isTar\">{{file.value ? file.value : 0}} %</span>\n        <button *ngIf=\"!file.iscompeleted && file.isTar\" mat-icon-button class=\"color-negetive\" (click)=\"cancel(file)\">\n          <mat-icon>clear</mat-icon>\n        </button>\n      </span>\n      <mat-progress-bar *ngIf=\"!file.iscompeleted && file.isTar\" class=\"my-progress-bar ml-3 background-accent\"\n                        mode=\"determinate\"\n                        [value]=\"file.value\"></mat-progress-bar>\n\n\n    </div>\n\n\n  </div>\n\n\n</div>\n\n\n\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {User} from '../../interfaces/User';\r\n\r\n\r\n@Component({\r\n  selector: 'app-expansions-user-management',\r\n  templateUrl: './expansions-user-management.component.html',\r\n  styleUrls: ['./expansions-user-management.component.css']\r\n})\r\nexport class ExpansionsUserManagementComponent implements OnInit {\r\n\r\n  clickButton = false;\r\n  @Input() items: User[];\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  public onClick(user: User) {\r\n    console.log(user);\r\n  }\r\n\r\n  preventOpenExpansion(): void {\r\n    this.clickButton = true;\r\n  }\r\n\r\n  isOdd(i: number): boolean {\r\n    if ((i % 2) === 0) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n}\r\n","<mat-accordion class=\"example-headers-align\" >\r\n\r\n  <mat-expansion-panel disabled class=\"background-primary-light2  mat-elevation-z4\">\r\n    <mat-expansion-panel-header class=\"cursor\">\r\n      <mat-panel-title class=\"menu-font\">Username</mat-panel-title>\r\n\r\n      <mat-panel-description class=\"menu-font\">Role</mat-panel-description>\r\n\r\n      <mat-panel-description class=\"menu-font\">Operation</mat-panel-description>\r\n\r\n    </mat-expansion-panel-header>\r\n  </mat-expansion-panel>\r\n\r\n  <mat-expansion-panel *ngFor=\"let item of items; index as i\" class=\"padding\" [disabled]=\"clickButton\" (click)=\"clickButton=false\"\r\n\r\n                       [ngClass]=\"{\r\n                       'background-gray': !isOdd(i),\r\n                       'background-gray-white': isOdd(i)\r\n                       }\">\r\n    <mat-expansion-panel-header>\r\n      <mat-panel-title class=\"pb-3\">\r\n        {{item.username}}\r\n      </mat-panel-title>\r\n\r\n      <mat-panel-description class=\"pb-3\">\r\n        {{item.role}}\r\n      </mat-panel-description>\r\n\r\n      <mat-panel-description>\r\n        <mat-form-field appearance=\"outline\" (click)=\"preventOpenExpansion()\">\r\n          <mat-label>Operation</mat-label>\r\n          <mat-select [(value)]=\"item.operation\" (valueChange)=\"onClick(item)\">\r\n            <mat-option value=\"Change password\">Change password</mat-option>\r\n            <mat-option value=\"Edit Role\">Edit Role</mat-option>\r\n            <mat-option value=\"Activate\">Activate</mat-option>\r\n            <mat-option value=\"Deactivate\">Deactivate</mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n      </mat-panel-description>\r\n\r\n\r\n    </mat-expansion-panel-header>\r\n    <p>I'm visible because I am open</p>\r\n  </mat-expansion-panel>\r\n\r\n\r\n</mat-accordion>\r\n","import {Component, OnInit} from '@angular/core';\nimport {HostService} from '../../services/host/host.service';\nimport {MatDialog} from '@angular/material/dialog';\nimport {JsonViewComponent} from '../../Modal/json-view/json-view.component';\nimport {EditHostComponent} from '../../Modal/edit-host/edit-host.component';\n\n@Component({\n  selector: 'app-host',\n  templateUrl: './host.component.html',\n  styleUrls: ['./host.component.css']\n})\nexport class HostComponent implements OnInit {\n\n  items: any[];\n  displayedColumns: string[] = ['Name', 'Addr', 'Hostname', 'Role', 'Availability', 'State', 'Edit', 'Json'];\n\n  constructor(\n    private service: HostService,\n    protected dialog: MatDialog\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.getAllHost();\n  }\n\n  private getAllHost() {\n    this.service.getAllHost().subscribe(\n      (response: any[]) => {\n        const responseSort = response.sort(\n          (a, b) => {\n            return (a.Spec.Name <= b.Spec.Name ? -1 : 1);\n          }\n        );\n        this.items = responseSort;\n      }\n    );\n  }\n\n\n  protected onClickJson(item: any): void {\n    let dialogRef = this.dialog.open(JsonViewComponent, {\n      minWidth: '750px',\n      height: '80%',\n      data: item\n    });\n\n    dialogRef.afterClosed().subscribe(\n      result => {\n\n      }\n    );\n\n  }\n\n  protected edit(element): void {\n\n    let dialogRef = this.dialog.open(EditHostComponent, {\n      minWidth: '750px',\n      maxHeight: '80%',\n      data: element\n    });\n\n    dialogRef.afterClosed().subscribe(\n      result => {\n        ``;\n        if (result) {\n          this.getAllHost();\n        }\n      }\n    );\n\n\n  }\n}\n","<app-panel>\n\n  <ng-container class=\"header\">\n    Host manager\n  </ng-container>\n\n  <ng-container class=\"body\">\n\n\n    <!-- ********* Table ************** -->\n\n    <table mat-table [dataSource]=\"items\" class=\"mat-elevation-z8 my-table\">\n\n\n      <ng-container matColumnDef=\"Name\">\n        <th mat-header-cell *matHeaderCellDef> Name</th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.Spec?.Name}} </td>\n      </ng-container>\n\n\n      <ng-container matColumnDef=\"Addr\">\n        <th mat-header-cell *matHeaderCellDef> Address</th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.Status?.Addr}} </td>\n      </ng-container>\n\n\n      <ng-container matColumnDef=\"Hostname\">\n        <th mat-header-cell *matHeaderCellDef> Host name</th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.Description.Hostname}} </td>\n      </ng-container>\n\n\n      <ng-container matColumnDef=\"Role\">\n        <th mat-header-cell *matHeaderCellDef> Role</th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.Spec.Role}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"Availability\">\n        <th mat-header-cell *matHeaderCellDef> Availability</th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.Spec.Availability}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"State\">\n        <th mat-header-cell *matHeaderCellDef> State</th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.Status?.State}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"Json\">\n        <th mat-header-cell *matHeaderCellDef> Json view</th>\n        <td mat-cell *matCellDef=\"let element\">\n\n          <button mat-icon-button (click)=\"onClickJson(element)\" class=\"icon color-black-high\">\n            <mat-icon>error_outline</mat-icon>\n          </button>\n\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"Edit\">\n        <th mat-header-cell *matHeaderCellDef> Edit</th>\n        <td mat-cell *matCellDef=\"let element\">\n\n          <button mat-icon-button (click)=\"edit(element)\" class=\"icon color-black-high\">\n            <mat-icon>edit</mat-icon>\n          </button>\n\n        </td>\n      </ng-container>\n\n\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\" class=\"hover\"></tr>\n    </table>\n\n\n  </ng-container>\n\n</app-panel>\n\n\n","import {Component, OnInit} from '@angular/core';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {ImageService} from '../../services/image/image.service';\nimport {MatTableDataSource} from '@angular/material/table';\nimport {ToasterService} from 'angular2-toaster';\nimport {LoginService} from '../../services/login-service/login.service';\nimport {MatDialog} from '@angular/material/dialog';\nimport {ConfirmDeleteImageComponent} from '../../Modal/confirm-delete-image/confirm-delete-image.component';\nimport {HostService} from '../../services/host/host.service';\n\n\ninterface Image {\n  RepoTags: string;\n  Label: string;\n  Created: string;\n  Size: number;\n}\n\n\n@Component({\n  selector: 'app-image',\n  templateUrl: './image.component.html',\n  styleUrls: ['./image.component.css']\n})\n\nexport class ImageComponent implements OnInit {\n\n  imagesList = new MatTableDataSource<Image>();\n  isDisplayDelete = false;\n  selection = new SelectionModel(true, []);\n  displayedColumns: string[] = ['select', 'repoTag', 'label', 'created', 'size', 'delete'];\n\n\n  hosts: string[];\n  hostSelect: string;\n\n\n  constructor\n  (\n    public service: ImageService,\n    private hostService: HostService,\n    private toasterService: ToasterService,\n    private l: LoginService,\n    private matDilog: MatDialog\n  ) {\n  }\n\n\n  ngOnInit(): void {\n\n    this.hostService.getHosts().subscribe(\n      (response: string[]) => {\n        this.hosts = response;\n        this.hostSelect = this.hosts[0];\n        this.reload();\n      }\n    );\n\n\n\n  }\n\n\n  bitToMB(bit: number): string {\n    return (bit / (8 * 1024 * 1024)).toFixed(2) + ' MB';\n  }\n\n\n  delete(row, force) {\n    this.service.deleteImage(row.Id, this.hostSelect, force).subscribe(\n      (response: any) => {\n        this.toast('success', response.message);\n      },\n      error => {\n        this.toasterService.pop({\n          type: 'error',\n          title: `can't delete ${row.RepoTags[0]}`,\n          body: error.error.message,\n          timeout: 5000,\n          showCloseButton: true\n        });\n      },\n      () => {\n        let index = this.imagesList.data.indexOf(row);\n        this.imagesList.data.splice(index, 1);\n        this.imagesList._updateChangeSubscription();\n      }\n    );\n  }\n\n  deleteSelected(force: boolean) {\n\n\n    this.service.deleteImage(this.selection.selected[0].Id, this.hostSelect, force).subscribe(\n      (response: any) => {\n        this.toast('success', response.message);\n      },\n      error => {\n\n\n        this.toasterService.pop({\n          type: 'error',\n          title: `can't delete ${this.selection.selected[0].RepoTags[0]}`,\n          body: error.error.message,\n          timeout: 5000,\n          showCloseButton: true\n        });\n\n\n        // this.selection.selected.splice(0, 1);\n        this.onChangeCheckBox(this.selection.selected[0]);\n        this.selection.selected.length > 0 ? this.deleteSelected(force) : null;\n\n\n      },\n      () => {\n        let index = this.imagesList.data.indexOf(this.selection.selected[0]);\n        this.imagesList.data.splice(index, 1);\n        this.imagesList._updateChangeSubscription();\n\n        this.selection.selected.splice(0, 1);\n        this.selection.selected.length > 0 ? this.deleteSelected(force) : null;\n\n      }\n    );\n  }\n\n\n  showDialog(row) {\n\n\n    if (row) {\n      let confirmDelete = this.matDilog.open(ConfirmDeleteImageComponent,\n        {\n          data: {\n            selectedImages: row,\n            hostIp: this.hostSelect\n          }\n        });\n\n      confirmDelete.afterClosed().subscribe(\n        result => {\n          if (result != undefined && result != null) {\n            this.delete(row, result);\n          }\n        }\n      );\n\n\n    } else {\n\n      let confirmDelete = this.matDilog.open(ConfirmDeleteImageComponent,\n        {\n          data: {\n            selectedImages: this.selection.selected,\n            hostIp: this.hostSelect\n          }\n        });\n\n\n      confirmDelete.afterClosed().subscribe(\n        result => {\n          if (result != undefined && result != null) {\n            this.deleteSelected(result);\n          }\n        }\n      );\n    }\n\n\n  }\n\n  reload() {\n    if (this.hostSelect) {\n      this.selection.clear();\n\n      this.service.getImages(this.hostSelect).subscribe(\n        (response: any[]) => {\n          const responseSort = response.sort(\n            (a, b) => {\n              return (a.RepoTags[0] < b.RepoTags[0] ? -1 : 1);\n            }\n          );\n\n          this.imagesList.data = responseSort;\n        },\n        error => {\n          this.toast('error', 'didn\\'t receive any response from server');\n        });\n    }\n  }\n\n\n  onBeforeUpload() {\n    this.service.updating = true;\n  }\n\n  onCancellUploading() {\n    this.service.updating = false;\n  }\n\n  onAfterUpload(e) {\n    this.reload();\n    this.toast(e.type, e.message);\n    this.service.updating = false;\n  }\n\n\n  private toast(type: string, message: string) {\n    this.toasterService.pop(\n      {\n        type: type,\n        body: message,\n        showCloseButton: true,\n        timeout: 5000\n      });\n  }\n\n\n  onChangeCheckBox(row) {\n    this.selection.toggle(row);\n  }\n\n\n  /** Whether the number of selected elements matches the total number of rows. */\n  isAllSelected(): boolean {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.imagesList.filteredData.length;\n    return numSelected === numRows;\n  }\n\n  isAnySelected(): boolean {\n    return this.selection.selected.length > 0 ? true : false;\n  }\n\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\n  masterToggle() {\n    this.isAllSelected() ?\n      this.selection.clear() :\n      this.imagesList.filteredData.forEach(row => this.selection.select(row));\n  }\n\n  isEmptyImageList(): boolean {\n    return !(this.imagesList.data.length > 0);\n  }\n\n  onSelectionChange() {\n    this.imagesList.data = [];\n    this.reload();\n  }\n\n}\n","<div class=\"all-panel mat-elevation-z2\">\n  <!--  <div class=\"header mat-elevation-z2\">-->\n\n\n  <mat-select class=\"form-control form-control-lg background-gray\" [disabled]=\"service.updating\"\n              (selectionChange)=\"onSelectionChange()\"\n              [(value)]=\"hostSelect\">\n\n    <mat-option *ngFor=\"let host of hosts\" [value]=\"host\">\n      {{host}}\n    </mat-option>\n  </mat-select>\n\n  <!--  </div>-->\n  <div class=\"body\">\n\n\n    <app-drag-and-drop-file *ngIf=\"hostSelect\"\n                            [host]=\"hostSelect\"\n                            (onCancellUploading)=\"onCancellUploading()\"\n                            (beforeUpload)=\"onBeforeUpload()\"\n                            (afterUpload)=\"onAfterUpload($event)\">\n    </app-drag-and-drop-file>\n\n\n      <div *ngIf=\"!isEmptyImageList()\">\n        <mat-divider class=\"mt-5\"></mat-divider>\n\n\n        <div class=\"mt-5 position-btn\">\n\n          <button mat-mini-fab class=\"my-button\" [disabled]=\"!isAnySelected() || updating\" (click)=\"showDialog()\">\n            <mat-icon>delete</mat-icon>\n          </button>\n\n\n          <button [disabled]=\"service.updating\" mat-mini-fab class=\"my-button ml-3\" (click)=\"reload()\">\n            <mat-icon>refresh</mat-icon>\n          </button>\n        </div>\n\n\n\n        <table mat-table [(dataSource)]=\"imagesList\" class=\"mat-elevation-z8 mt-4\">\n\n          <!-- check box -->\n          <ng-container matColumnDef=\"select\">\n            <th mat-header-cell *matHeaderCellDef>\n              <mat-checkbox (change)=\"masterToggle()\"\n                            [disabled]=\"service.updating\"\n                            [checked]=\"selection.hasValue() && isAllSelected()\"\n                            [indeterminate]=\"(selection.selected.length>0) && !isAllSelected()\">\n              </mat-checkbox>\n            </th>\n            <td mat-cell *matCellDef=\" let row\">\n              <mat-checkbox (change)=\"onChangeCheckBox(row)\"\n                            [disabled]=\"service.updating\"\n                            [checked]=\"selection.isSelected(row)\">\n              </mat-checkbox>\n            </td>\n          </ng-container>\n\n\n          <!-- Repository tag -->\n          <ng-container matColumnDef=\"repoTag\">\n            <th mat-header-cell *matHeaderCellDef> Repository tag</th>\n            <td mat-cell *matCellDef=\"let element\"> {{element.RepoTags[0]}} </td>\n          </ng-container>\n\n          <!-- Label -->\n          <ng-container matColumnDef=\"label\">\n            <th mat-header-cell *matHeaderCellDef> Label</th>\n            <td mat-cell *matCellDef=\"let element ; let i = index\"> {{element.Labels}} </td>\n          </ng-container>\n\n          <!-- Created at -->\n          <ng-container matColumnDef=\"created\">\n            <th mat-header-cell *matHeaderCellDef> Created at</th>\n            <td mat-cell *matCellDef=\"let element\"> {{element.Created | date : 'medium'}} </td>\n          </ng-container>\n\n          <!-- size -->\n          <ng-container matColumnDef=\"size\">\n            <th mat-header-cell *matHeaderCellDef> size</th>\n            <td mat-cell *matCellDef=\"let element\"> {{bitToMB(element.Size)}} </td>\n          </ng-container>\n\n          <!-- Delete -->\n          <ng-container matColumnDef=\"delete\">\n            <th mat-header-cell *matHeaderCellDef> Delete</th>\n            <td mat-cell *matCellDef=\"let element\" (mouseenter)=\"isDisplayDelete = true\"\n                (mouseleave)=\"isDisplayDelete = false\">\n\n              <button [disabled]=\"service.updating\" mat-icon-button class=\"delete-icon\" (click)=\"showDialog(element)\">\n                <mat-icon [class.icon]=\"!service.updating\" class=\"color-black-medium \">delete</mat-icon>\n              </button>\n            </td>\n          </ng-container>\n\n          <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n          <tr mat-row class=\"hover\" *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n        </table>\n\n      </div>\n  </div>\n</div>\n\n\n","import {Component, OnInit} from '@angular/core';\r\nimport {LogManagementService} from '../../services/log-management/log-management.service';\r\n\r\n@Component({\r\n  selector: 'app-log-management',\r\n  templateUrl: './log-management.component.html',\r\n  styleUrls: ['./log-management.component.css']\r\n})\r\n\r\nexport class LogManagementComponent implements OnInit {\r\n\r\n\r\n  // logs: Log[] = null;\r\n  // totalLength: number;\r\n  query: any;\r\n  input: string;\r\n  isAdvanceSearch = true;\r\n  // noResultMessage = false;\r\n  connectionFailed = false;\r\n\r\n  constructor(private service: LogManagementService) {\r\n  }\r\n\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n\r\n  goToAdvaceSearch(): void {\r\n    this.isAdvanceSearch = true;\r\n  }\r\n\r\n  clearAdvaceSearch(): void {\r\n    this.isAdvanceSearch = false;\r\n  }\r\n\r\n\r\n  AdvanceSearch(e): void {\r\n\r\n    this.query = JSON.stringify(e);\r\n\r\n  }\r\n\r\n\r\n  search(): void {\r\n\r\n    if (this.input) {\r\n\r\n      this.query = JSON.stringify(this.createQuery(this.input));\r\n\r\n    }\r\n  }\r\n\r\n\r\n  /*private createQuery(str: string) {\r\n\r\n    const query = {\r\n      'bool': {\r\n        'should': [\r\n          {'query_string': {'query': `${str}`, 'fields': ['source', 'content']}},\r\n          {'query_string': {'query': `${str}*`, 'fields': ['source', 'content']}},\r\n          {'query_string': {'query': `*${str}*`, 'fields': ['source', 'content']}},\r\n        ]\r\n      }\r\n    };\r\n\r\n    return query;\r\n\r\n  }*/\r\n\r\n\r\n  private createQuery(str: string) {\r\n\r\n    const query = {\r\n        '$or': [\r\n          {host: {$eq: str}},\r\n           {ident: {$eq: str}},\r\n           {message: {$eq: str}},\r\n           {priority: {$eq: str}},\r\n           {facilityLevel: {$eq: str}},\r\n           {hostsource: {$eq: str}}\r\n        ]\r\n      };\r\n\r\n\r\n\r\n   /* const query = {\r\n        '$or': [\r\n          {host: {$regex: str}},\r\n          {ident: {$regex: str}},\r\n          {message: {$regex: str}},\r\n          {priority: {$regex: str}},\r\n          {facilityLevel: {$regex: str}},\r\n          {hostsource: {$regex: str}}\r\n        ]\r\n      };*/\r\n\r\n    return query;\r\n\r\n  }\r\n\r\n\r\n}\r\n","<div class=\"all-panel mat-elevation-z2 darker-span\">\r\n  <div class=\"header mat-elevation-z2\" [ngClass]=\"{\r\n  'background-primary-light1' : !isAdvanceSearch,\r\n  'background-gray-white' : isAdvanceSearch\r\n  }\">\r\n\r\n\r\n    <div *ngIf=\"!isAdvanceSearch\" class=\"row center\">\r\n      <input type=\"text\" [(ngModel)]=\"input\"\r\n             class=\"form-control mb-2 mr-sm-2  none-margin-bottom col-7\"\r\n             (keyup.enter)=\"search()\"\r\n             id=\"inlineFormInputName2\" placeholder=\"Search for logs\">\r\n      <button mat-raised-button\r\n              class=\"background-accent-light color-white-high col-1\"\r\n              (click)=\"search()\">\r\n        Search\r\n      </button>\r\n      <button mat-button class=\"color-accent-light size my-hover none-outline col-1\" (click)=\"goToAdvaceSearch()\">\r\n        Advance search\r\n      </button>\r\n    </div>\r\n\r\n    <app-advance-search-form (advance)=\"AdvanceSearch($event)\" (clearAdvance)=\"clearAdvaceSearch()\"\r\n                             *ngIf=\"isAdvanceSearch\"></app-advance-search-form>\r\n  </div>\r\n\r\n  <div class=\"body\">\r\n    <app-table-log-management *ngIf=\"query\" [query]=\"query\"></app-table-log-management>\r\n    <div *ngIf=\"!query\" class=\"alert background-primary-light2 color-black-high\" role=\"alert\">There is no data to\r\n      display. please search first\r\n    </div>\r\n\r\n  </div>\r\n</div>\r\n\r\n\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {FormControl, Validators} from '@angular/forms';\r\nimport {Router} from '@angular/router';\r\nimport {LoginService} from '../../services/login-service/login.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n  username = new FormControl('', Validators.required);\r\n  password = new FormControl('', Validators.required);\r\n\r\n\r\n  hidePassword = true;\r\n  isWrong = false;\r\n  errorMassege: string;\r\n\r\n  constructor(private router: Router, private service: LoginService) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n  signIn(): void {\r\n\r\n\r\n    let body = {\r\n      'username': this.username.value,\r\n      'password': this.password.value\r\n    };\r\n\r\n    this.service.getTokenFromServer(body).subscribe(res => {\r\n        if (res) {\r\n          this.router.navigate(['']);\r\n        } else {\r\n          this.isWrong = true;\r\n\r\n        }\r\n      },\r\n\r\n      error => {\r\n        this.errorMassege = error.error.message;\r\n        this.isWrong = true;\r\n\r\n\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  isDisable(): boolean {\r\n    if (this.username.invalid || this.password.invalid) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n","<div class=\"background\">\r\n<div>\r\n\r\n  <div *ngIf=\"isWrong\" class=\"alert alert-danger\">{{errorMassege ? errorMassege : 'An error has occurred !'}}</div>\r\n  <div class=\"box mat-elevation-z8\">\r\n    <div class=\"header\">\r\n      <h1 class=\"color-white-high\">Login</h1>\r\n    </div>\r\n\r\n    <div class=\"body\">\r\n      <mat-form-field>\r\n        <mat-label>username</mat-label>\r\n        <input matInput type=\"text\" [formControl]=\"username\">\r\n        <mat-error>you must Enter username</mat-error>\r\n      </mat-form-field>\r\n\r\n\r\n      <mat-form-field>\r\n        <mat-label>password</mat-label>\r\n        <input matInput [type]=\"hidePassword ? 'password' : 'text'\" [formControl]=\"password\">\r\n        <mat-error>you must Enter password</mat-error>\r\n      </mat-form-field>\r\n\r\n\r\n      <div class=\"buttons\">\r\n        <button mat-raised-button  class=\"background-primary-light1 color-white-high none-outline signIn\"\r\n                (click)=\"signIn()\">Sign In\r\n        </button>\r\n\r\n        <button mat-button class=\"none-outline color-primary forget\">forget password</button>\r\n      </div>\r\n\r\n    </div>\r\n\r\n  </div>\r\n</div>\r\n</div>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {ToasterConfig} from 'angular2-toaster';\r\n\r\n@Component({\r\n  selector: 'app-main',\r\n  templateUrl: './main.component.html',\r\n  styleUrls: ['./main.component.css']\r\n})\r\nexport class MainComponent implements OnInit {\r\n\r\n  public config: ToasterConfig = new ToasterConfig(\r\n    {\r\n      mouseoverTimerStop: true\r\n    }\r\n  );\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<div class=\"full-screen\">\r\n  <app-toolbar></app-toolbar>\r\n  <mat-drawer-container>\r\n    <mat-drawer class=\"mat-elevation-z8\" opened mode=\"side\">\r\n      <app-sidebar [disabled]=\"false\"></app-sidebar>\r\n    </mat-drawer>\r\n\r\n    <mat-drawer-content>\r\n      <router-outlet></router-outlet>\r\n    </mat-drawer-content>\r\n  </mat-drawer-container>\r\n</div>\r\n\r\n<toaster-container [toasterconfig]=\"config\" class=\"mat-elevation-z16\"></toaster-container>\r\n","import {Component, OnInit} from '@angular/core';\nimport {NetworkService} from '../../services/network/network.service';\nimport {MatDialog} from '@angular/material/dialog';\nimport {CreateNetworkComponent} from '../../Modal/create-network/create-network.component';\nimport {ToasterConfig, ToasterService} from 'angular2-toaster';\n\n@Component({\n  selector: 'app-network',\n  templateUrl: './network.component.html',\n  styleUrls: ['./network.component.css']\n})\nexport class NetworkComponent implements OnInit {\n\n\n  items: any[];\n  displayedColumns: string[] = ['name', 'scope', 'driver', 'subnet', 'ipRange', 'gateway'];\n  public config: ToasterConfig = new ToasterConfig({mouseoverTimerStop: true});\n\n  constructor(private service: NetworkService, private dialog: MatDialog, private toasterService: ToasterService) {\n  }\n\n  ngOnInit( ): void {\n    this.getAllNetwork();\n  }\n\n  private getAllNetwork() {\n    this.service.getAllNetworks().subscribe(\n      (response: any[]) => {\n        const responseSort = response.sort(\n          (a, b) => {\n            return a.Name <= b.Name ? -1 : 1;\n          }\n        );\n        this.items = responseSort;\n      }\n    );\n  }\n\n  refresh() {\n    this.getAllNetwork();\n  }\n\n  public addNetwok(): void {\n    const dialogRef = this.dialog.open(CreateNetworkComponent, {\n      data: {\n        service: this.service\n      }\n    });\n    dialogRef.afterClosed().subscribe(result => {\n      if (result.Id) {\n        this.toast('success', 'Network successfully built');\n        this.getAllNetwork();\n      }\n    });\n  }\n\n\n  private toast(type: string, message: string) {\n    this.toasterService.pop(\n      {\n        type: type,\n        body: message,\n        showCloseButton: true,\n        timeout: 5000\n      });\n  }\n\n}\n","<app-panel>\n  <ng-container class=\"header \">\n    Network Manager\n  </ng-container>\n\n  <ng-container class=\"body\">\n\n    <!-- ************* button ********** -->\n    <div class=\"mb-3 mr-3 position-btn\">\n      <button mat-mini-fab class=\"my-button ml-3\" (click)=\"addNetwok()\">\n        <mat-icon>add</mat-icon>\n      </button>\n\n      <button  mat-mini-fab class=\"my-button ml-3\" (click)=\"refresh()\" >\n        <mat-icon>refresh</mat-icon>\n      </button>\n    </div>\n\n    <!-- ************* table ********** -->\n\n    <table mat-table [dataSource]=\"items\" class=\"mat-elevation-z8 my-table\">\n\n      <ng-container matColumnDef=\"name\">\n        <th mat-header-cell *matHeaderCellDef> Name</th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.Name}} </td>\n      </ng-container>\n\n\n      <ng-container matColumnDef=\"scope\">\n        <th mat-header-cell *matHeaderCellDef> Scope</th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.Scope}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"driver\">\n        <th mat-header-cell *matHeaderCellDef> Driver</th>\n        <td mat-cell *matCellDef=\"let element\"> {{element?.Driver}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"subnet\">\n        <th mat-header-cell *matHeaderCellDef> subnet</th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.IPAM?.Config[0]?.Subnet}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"ipRange\">\n        <th mat-header-cell *matHeaderCellDef> IPRange</th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.IPAM?.Config[0]?.IpaRange}} </td>\n      </ng-container>\n\n\n      <ng-container matColumnDef=\"gateway\">\n        <th mat-header-cell *matHeaderCellDef> Gateway</th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.IPAM?.Config[0]?.Gateway}} </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\" class=\"hover\"></tr>\n    </table>\n\n\n  </ng-container>\n\n</app-panel>\n\n<toaster-container [toasterconfig]=\"config\" class=\"mat-elevation-z16\"></toaster-container>\n","import {Component, OnInit} from '@angular/core';\nimport {AbstractControl, FormArray, FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\nimport {HostService} from '../../services/host/host.service';\nimport {NodesNetworkManagementService} from '../../services/node-network-management/nodes-network-management.service';\n\n@Component({\n  selector: 'app-nodes-network-management',\n  templateUrl: './nodes-network-management.component.html',\n  styleUrls: ['./nodes-network-management.component.css']\n})\nexport class NodesNetworkManagementComponent implements OnInit {\n\n  public hasError = false;\n  public errorMessage: string;\n  public formGroup: FormGroup;\n  public nodeIdList: FormArray;\n  public hosts: string[];\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private hostService: HostService,\n    private service: NodesNetworkManagementService\n  ) {\n  }\n\n  ngOnInit(): void {\n\n\n    // initialize formGroup\n    this.formGroup = this.formBuilder.group({\n      host: new FormControl(null, Validators.required),\n      user: new FormControl(null, Validators.required),\n      password: new FormControl(null, Validators.required),\n      gateway: new FormControl(),\n      nodeIdList: this.formBuilder.array([this.createNode()]),\n    });\n\n\n    this.hostService.getHosts().subscribe(\n      (response: string[]) => {\n        this.hosts = response;\n      }\n    );\n\n  }\n\n  private createNode(): FormGroup {\n    return this.formBuilder.group({\n      nodeId: new FormControl()\n    });\n  }\n\n  public addNode(): void {\n    this.nodeIdList = this.formGroup.get('nodeIdList') as FormArray;\n    this.nodeIdList.push(this.createNode());\n  }\n\n  public getNodeIdList(): AbstractControl[] {\n    return (this.formGroup.controls.nodeIdList as FormArray).controls;\n  }\n\n  public click() {\n\n    let nodeIds = [];\n\n    for (let nodeId of this.getNodeIdList()) {\n      nodeIds.push(nodeId.value.nodeId);\n    }\n\n    let body = {\n      'host': this.formGroup.controls.host.value,\n      'user': this.formGroup.controls.user.value,\n      'password': this.formGroup.controls.password.value,\n      'gateway': this.formGroup.controls.gateway.value,\n      'nodeIdList': nodeIds\n    };\n\n    console.log(body);\n\n    /* this.service.saveNode(body).subscribe(\n       response => {\n         console.log(response);\n         this.hasError = false;\n       },\n       error => {\n         console.log(error);\n         this.errorMessage = error.error.message;\n         this.hasError = true;\n       }\n     );*/\n\n  }\n\n  protected removeNodeId(i) {\n    this.getNodeIdList().splice(i, 1);\n  }\n\n\n}\n","<app-panel>\n  <ng-container class=\"header\">Nodes network management</ng-container>\n  <ng-container class=\"body\">\n\n    <div class=\"alert-danger alert\" *ngIf=\"hasError\">{{errorMessage}}</div>\n\n    <form class=\"mt-4\">\n      <!-- ************* Host ******************* -->\n      <div class=\"row\">\n        <div class=\"col-2 color-accent\">host:</div>\n        <div class=\"col-4 width\">\n          <mat-form-field appearance=\"outline\">\n            <mat-label>Host</mat-label>\n            <mat-select [formControl]=\"formGroup.controls.host\" [value]=\"formGroup.controls.host.value\">\n              <mat-option *ngFor=\"let host of hosts\" [value]=\"host\">{{host}}</mat-option>\n            </mat-select>\n            <mat-error>\n              this field is required\n            </mat-error>\n          </mat-form-field>\n\n        </div>\n      </div>\n\n      <mat-divider></mat-divider>\n      <!-- ************* User ******************* -->\n      <div class=\"row\">\n        <div class=\"col-2 color-accent\">User:</div>\n        <div class=\"col-4 width\">\n\n          <mat-form-field appearance=\"outline\">\n            <mat-label>User</mat-label>\n            <input type=\"text\" autocomplete=\"new-user\" name=\"user\" id=\"userssh\" matInput\n                   [formControl]=\"formGroup.controls.user\">\n            <mat-error>\n              this field is required\n            </mat-error>\n          </mat-form-field>\n        </div>\n      </div>\n\n\n\n      <mat-divider></mat-divider>\n      <!-- ************* Password ******************* -->\n      <div class=\"row\">\n        <div class=\"col-2 color-accent\">Password:</div>\n        <div class=\"col-4 width\">\n\n          <mat-form-field appearance=\"outline\">\n            <mat-label>Password</mat-label>\n            <input type=\"password\" name=\"password\" autocomplete=\"new-password\" matInput\n                   [formControl]=\"formGroup.controls.password\">\n            <mat-error>\n              this field is required\n            </mat-error>\n          </mat-form-field>\n        </div>\n      </div>\n\n\n      <mat-divider></mat-divider>\n      <!-- ************* Gateway ******************* -->\n      <div class=\"row\">\n        <div class=\"col-2 color-accent\">Gateway:</div>\n        <div class=\"col-4 width\">\n\n          <mat-form-field appearance=\"outline\">\n            <mat-label>Gateway</mat-label>\n            <input type=\"text\" matInput [formControl]=\"formGroup.controls.gateway\">\n          </mat-form-field>\n        </div>\n      </div>\n\n\n      <mat-divider></mat-divider>\n      <!-- ************* Node List ******************* -->\n      <div class=\"row\">\n        <div class=\"col-2 color-accent\">Node List:</div>\n        <div class=\"col-4 custom-border width\">\n\n          <div *ngFor=\"let nodId of getNodeIdList(); let i = index\">\n\n            <mat-form-field appearance=\"outline\">\n              <mat-label>Node Id</mat-label>\n              <input [formControl]=\"nodId.controls.nodeId\" matInput type=\"text\">\n            </mat-form-field>\n\n            <button mat-icon-button class=\"color-negetive\" (click)=\"removeNodeId(i)\">\n              <mat-icon>remove</mat-icon>\n            </button>\n\n          </div>\n\n\n          <button mat-icon-button class=\"color-positive add-nodeId\" (click)=\"addNode()\">\n            <mat-icon>add</mat-icon>\n          </button>\n        </div>\n      </div>\n\n    </form>\n\n\n    <!-- ************* Buttons ******************* -->\n    <div class=\"btns-group mt-2\">\n\n      <button mat-button class=\"background-accent-light color-white-high mr-3 ml-3\"\n              [disabled]=\"this.formGroup.status==='INVALID'\" (click)=\"click()\">\n        Click\n      </button>\n\n    </div>\n\n\n  </ng-container>\n</app-panel>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-panel',\n  templateUrl: './panel.component.html',\n  styleUrls: ['./panel.component.css']\n})\nexport class PanelComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","\r\n<div class=\"all-panel mat-elevation-z2\">\r\n\r\n  <div  class=\"header mat-elevation-z2 background-primary-light1 color-white-high\">\r\n    <ng-content select=\".header\"></ng-content>\r\n  </div>\r\n\r\n  <div  class=\"body\">\r\n    <ng-content select=\".body\"></ng-content>\r\n  </div>\r\n\r\n</div>\r\n\r\n\r\n\r\n","import {Component, Input, OnInit} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-pie-chart',\r\n  templateUrl: './pie-chart.component.html',\r\n  styleUrls: ['./pie-chart.component.css']\r\n})\r\nexport class PieChartComponent implements OnInit {\r\n  freeColor = 'var(--my-gray-white)';\r\n  @Input() color: string;\r\n  c = 'linear-gradient(to left, transparent 50%, ' + this.freeColor + ' 0)';\r\n\r\n  @Input() percentage: number;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  ComputeDegree(): number {\r\n    return ((this.percentage * 360) / 100);\r\n  }\r\n\r\n  getDegreeAndBackgroundColor(): out {\r\n\r\n    let x = this.ComputeDegree();\r\n\r\n\r\n    if (x <= 180) {\r\n      return {\r\n        degree: 'rotate(' + x + 'deg)',\r\n        backgroundColorInnerClass: this.freeColor,\r\n      };\r\n    } else {\r\n      return {\r\n        degree: 'rotate(' + (x - 180) + 'deg)',\r\n        backgroundColorInnerClass: 'inherit',\r\n      };\r\n    }\r\n\r\n  }\r\n\r\n}\r\n\r\nexport interface out {\r\n  degree: string;\r\n  backgroundColorInnerClass: string;\r\n}\r\n","<!--<div class=\"pie\"\r\n     [ngClass]=\"{\r\n     'green': percentage < 30 ,\r\n     'accent-light':percentage >= 30 && percentage < 50 ,\r\n     'accent': percentage >= 50 && percentage < 70 ,\r\n     'red':percentage >= 70\r\n     }\">-->\r\n\r\n  <div class=\"pie mat-elevation-z1\" [style.background]=\"color\" [style.background-image]=\"c\">\r\n\r\n  <div class=\"inner\"\r\n       [style.backgroundColor]=\"getDegreeAndBackgroundColor().backgroundColorInnerClass\"\r\n       [style.transform]=\"getDegreeAndBackgroundColor().degree\"\r\n  ></div>\r\n\r\n\r\n</div>\r\n\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {ServiceFormComponent} from '../../Modal/service-form/service-form.component';\r\nimport {ServiceMonitoringService} from '../../services/service-monitoring/service-monitoring.service';\r\n\r\n@Component({\r\n  selector: 'app-service-monitoring',\r\n  templateUrl: './service-monitoring.component.html',\r\n  styleUrls: ['./service-monitoring.component.css']\r\n})\r\nexport class ServiceMonitoringComponent implements OnInit {\r\n\r\n  t1 = 'Service Name';\r\n\r\n  items: any[];\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private service: ServiceMonitoringService\r\n  ) {\r\n  }\r\n\r\n  servicesInfo: any;\r\n\r\n  ngOnInit(): void {\r\n    this.getService();\r\n  }\r\n\r\n\r\n  public addService() {\r\n\r\n    this.service.getAllNetworksName().subscribe(\r\n      (response: any[]) => {\r\n\r\n        this.openDialog(response);\r\n\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  private openDialog(networksName) {\r\n    let dialog = this.dialog.open(ServiceFormComponent, {\r\n      width: '750px',\r\n      data: {checkboxItems: networksName}\r\n    });\r\n\r\n    dialog.afterClosed().subscribe(\r\n      result => {\r\n        if (result) {\r\n          this.getService();\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  /*private createService(body: any): void {\r\n    this.service.createService(body).subscribe(\r\n      response => {\r\n        console.log(response);\r\n        this.getService();\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }*/\r\n\r\n  public getService() {\r\n    this.service.getService().subscribe(\r\n      (response: any[]) => {\r\n\r\n        let sortResponse = response.sort(\r\n          (a, b) => {\r\n            return (new Date(a.createdAt)) >= (new Date(b.createdAt)) ? 1 : -1;\r\n          }\r\n        );\r\n\r\n\r\n        for (const name of this.service.defaultServiceName) {\r\n\r\n          let wasfind = false;\r\n          for (let service of sortResponse) {\r\n            if (service.serviceName.trim().toLowerCase() === name.trim().toLowerCase()) {\r\n              wasfind = true;\r\n              break;\r\n            }\r\n          }\r\n\r\n          if (!wasfind) {\r\n            sortResponse.unshift({\r\n              'serviceId': null,\r\n              'serviceName': name,\r\n              'imageName': null,\r\n              'replicas': 0,\r\n              'totalInstancesCount': 0,\r\n              'runningInstancesCount': 0,\r\n              'createdAt': null,\r\n              'updatedAt': null\r\n            });\r\n          }\r\n        }\r\n\r\n\r\n        // console.log(response);\r\n\r\n        this.items = sortResponse;\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n\r\n  public onClickRefresh(): void {\r\n    this.getService();\r\n  }\r\n\r\n}\r\n","<app-panel>\r\n  <ng-container class=\"header \">\r\n    Service management\r\n  </ng-container>\r\n  <ng-container class=\"body\">\r\n\r\n    <div class=\"mb-3 mr-3 position-btn\">\r\n      <button mat-mini-fab class=\"my-button ml-3\" (click)=\"addService()\">\r\n        <mat-icon>add</mat-icon>\r\n      </button>\r\n\r\n      <button mat-mini-fab class=\"my-button ml-3\" (click)=\"onClickRefresh()\">\r\n        <mat-icon>refresh</mat-icon>\r\n      </button>\r\n    </div>\r\n\r\n    <app-table-expansions-service-monitoring [items]=\"items\"\r\n                                             (refreshServices)=\"getService()\">\r\n\r\n    </app-table-expansions-service-monitoring>\r\n  </ng-container>\r\n</app-panel>\r\n","import {Component, Input, OnInit} from '@angular/core';\nimport {ImageService} from '../../services/image/image.service';\n\n\n@Component({\n  selector: 'app-sidebar',\n  templateUrl: './sidebar.component.html',\n  styleUrls: ['./sidebar.component.css']\n})\nexport class SidebarComponent implements OnInit {\n\n  @Input() disabled = false;\n\n  constructor(public imageService: ImageService) {\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n","<mat-selection-list class=\"style-list none-outline\" [multiple]=\"false\">\r\n  <mat-list-option class=\"custom-disabled\" [disabled]=\"true\" routerLinkActive=\"active\" routerLink=\"dashboard\" >H/W Dashboard</mat-list-option>\r\n<!--  <mat-list-option [class.custom-disabled]=\"imageService.updating\" [disabled]=\"imageService.updating\" routerLinkActive=\"active\" routerLink=\"dashboard\" >H/W Dashboard</mat-list-option>-->\r\n  <mat-list-option [class.custom-disabled]=\"imageService.updating\" [disabled]=\"imageService.updating\" routerLinkActive=\"active\" routerLink=\"service-monitoring\">Service managemet</mat-list-option>\r\n  <mat-list-option [class.custom-disabled]=\"imageService.updating\" [disabled]=\"imageService.updating\" routerLinkActive=\"active\" routerLink=\"image\" >Image</mat-list-option>\r\n  <mat-list-option [class.custom-disabled]=\"imageService.updating\" [disabled]=\"imageService.updating\" routerLinkActive=\"active\" routerLink=\"host\" >Host</mat-list-option>\r\n  <mat-list-option [class.custom-disabled]=\"imageService.updating\" [disabled]=\"imageService.updating\" routerLinkActive=\"active\" routerLink=\"network\" >Network</mat-list-option>\r\n<!--  <mat-list-option [class.custom-disabled]=\"imageService.updating\" [disabled]=\"imageService.updating\" routerLinkActive=\"active\" routerLink=\"nodes-network-management\" >Nodes network managemet</mat-list-option>-->\r\n  <!--  <mat-list-option [class.custom-disabled]=\"imageService.updating\" [disabled]=\"imageService.updating\" routerLinkActive=\"active \" routerLink=\"user-management\">User management</mat-list-option>-->\r\n  <mat-list-option class=\"custom-disabled\" [disabled]=\"true\" routerLinkActive=\"active \" routerLink=\"user-management\">User management</mat-list-option>\r\n<!--  <mat-list-option [class.custom-disabled]=\"imageService.updating\" [disabled]=\"imageService.updating\" routerLinkActive=\"active\">Backup</mat-list-option>-->\r\n  <mat-list-option class=\"custom-disabled\" [disabled]=\"true\" routerLinkActive=\"active\">Backup</mat-list-option>\r\n<!--  <mat-list-option [class.custom-disabled]=\"imageService.updating\" [disabled]=\"imageService.updating\" routerLinkActive=\"active\" routerLink=\"log-management\">Log Manegement</mat-list-option>-->\r\n  <mat-list-option class=\"custom-disabled\" disabled=\"true\" routerLinkActive=\"active\" >Log Manegement</mat-list-option>\r\n</mat-selection-list>\r\n\r\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {ServiceMonitoringService} from '../../services/service-monitoring/service-monitoring.service';\n\nimport {MatDialog} from '@angular/material/dialog';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {ConfirmComponent} from '../../Modal/confirm/confirm.component';\nimport {ServiceFormComponent} from '../../Modal/service-form/service-form.component';\nimport {ToasterService} from 'angular2-toaster';\n\n\n@Component({\n  selector: 'app-table-expansions-service-monitoring',\n  templateUrl: './table-expansions-service-monitoring.component.html',\n  styleUrls: ['./table-expansions-service-monitoring.component.css'],\n  animations: [\n    trigger('detailExpand', [\n      state('collapsed', style({height: '0px', minHeight: '0'})),\n      state('expanded', style({height: '*'})),\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\n    ]),\n  ],\n})\nexport class TableExpansionsServiceMonitoringComponent implements OnInit {\n\n  @Input() items: any[];\n  @Output() refreshServices = new EventEmitter();\n  tableItems: any;\n  displayedColumns: string[] = ['serviceName', 'runningAndReplicas', 'image', 'totalInstance', 'scale', 'createAtAndupdateAt', 'edit', 'delete'];\n  expandedElement: any | null;\n  disableExpansion: boolean = false;\n\n\n  constructor(\n    private service: ServiceMonitoringService,\n    private dialog: MatDialog,\n    private toasterService: ToasterService\n  ) {\n\n  }\n\n  ngOnInit(): void {\n\n  }\n\n\n  preventOpenExpansion(): void {\n    this.disableExpansion = true;\n  }\n\n  changeExpansion(element, index) {\n\n    if (element.serviceId) {\n\n      // this condition is for select : prevent from expand when click on select\n      if (!this.disableExpansion) {\n        this.expandedElement = this.expandedElement === element ? null : element;\n        if (this.expandedElement) {\n          this.getTask(element.serviceName, index);\n        }\n      } else {\n        this.disableExpansion = false;\n      }\n    }\n  }\n\n  public onChange(id, newReplicas, serviceName, index): void {\n\n    let dialog = this.dialog.open(ConfirmComponent, {\n\n        data: {\n          id: id,\n          newReplicas: newReplicas,\n          serviceName: serviceName,\n          title: `Change replicas to ${newReplicas} ?`,\n          content: `Are you share to cahnge replicas of ${serviceName} service to ${newReplicas} ? `\n        }\n      },\n    );\n\n    dialog.afterClosed().subscribe(\n      (result) => {\n        if (result === 'yes') {\n          this.service.changeReplicas(id, newReplicas).subscribe(\n            res => {\n              this.toasterService.pop({\n                type: 'success',\n                body: `the replicas of ${serviceName} service changes to ${res} successfully`,\n                showCloseButton: true,\n                timeout: 5000\n\n              });\n              this.refreshServices.emit();\n            }\n          );\n        } else {\n          this.refreshServices.emit();\n        }\n\n      }\n    );\n\n  }\n\n  getTask(serviceName, index) {\n\n    this.tableItems = null;\n\n    //get tasks of a service to show\n    this.service.getTasks(serviceName).subscribe(\n      (response: any[]) => {\n        const responseSort = response.sort(\n          ((a, b) => {\n            return (new Date(a.createdAt)) <= (new Date(b.createdAt)) ? 1 : -1;\n          })\n        );\n        this.tableItems = responseSort;\n      }\n    );\n  }\n\n\n  detectColor(state: string): string {\n\n    let blue = ['NEW', 'PENDING', 'ASSIGNED', 'ACCEPTED', 'PREPARING', 'STARTING'];\n    let green = ['RUNNING'];\n    let red = ['COMPLETE', 'FAILED', 'SHUTDOWN', 'REJECTED', 'ORPHANED', 'REMOVE'];\n\n\n    if (blue.includes(state)) {\n      return 'blue';\n    } else if (green.includes(state)) {\n      return 'green';\n    } else if (red.includes(state)) {\n      return 'red';\n    }\n\n\n  }\n\n\n  public deleteService(element: any): void {\n\n\n    let dialog = this.dialog.open(ConfirmComponent, {\n      data: {\n        title: `remove ${element.serviceName} service`,\n        content: `Are you sure to remove ${element.serviceName} service ?`\n      }\n    });\n\n    dialog.afterClosed().subscribe(\n      result => {\n        if (result == 'yes') {\n          this.service.deleteService(element.serviceId).subscribe(\n            respons => {\n              this.toasterService.pop({\n                type: 'success',\n                body: `the ${element.serviceName} service deleted successfully`,\n                timeout: 5000,\n                showCloseButton: true\n              });\n              this.refreshServices.emit();\n            }\n          );\n        }\n      }\n    );\n  }\n\n  public edit(element: any): void {\n\n    this.service.getAllNetworksName().subscribe(\n      (response: any[]) => {\n        this.openDialog(element, response);\n      }\n    );\n  }\n\n  private openDialog(element: any, checkboxItems: string[]) {\n    //if there is id => this service has image\n    //if there is NOT id => this service hasn't image\n    if (element.serviceId) {\n      this.service.getDetailService(element.serviceId).subscribe(\n        (response: any[]) => {\n\n          let data = response[0];\n          data.checkboxItems = checkboxItems;\n          let dialog = this.dialog.open(ServiceFormComponent, {\n            data: data,\n            width: '750px'\n          });\n\n          dialog.afterClosed().subscribe(\n            result => {\n              if (result) {\n                this.refreshServices.emit();\n\n              }\n            }\n          );\n        }\n      );\n    } else {\n      element.checkboxItems = checkboxItems;\n      let dialog = this.dialog.open(ServiceFormComponent, {\n        data: element,\n        width: '750px'\n      });\n\n      dialog.afterClosed().subscribe(\n        result => {\n          if (result) {\n            this.refreshServices.emit();\n          }\n        }\n      );\n    }\n  }\n\n}\n","<table mat-table [dataSource]=\"items\" class=\"mat-elevation-z8\" multiTemplateDataRows>\n\n\n  <!-- Service Name Column -->\n  <ng-container matColumnDef=\"serviceName\">\n    <th mat-header-cell *matHeaderCellDef> Service Name</th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.serviceName}} </td>\n  </ng-container>\n\n  <!-- Running / Replicas Column -->\n  <ng-container matColumnDef=\"runningAndReplicas\">\n    <th mat-header-cell *matHeaderCellDef> Running / Replicas</th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.runningInstancesCount}} / {{element.replicas}} </td>\n  </ng-container>\n\n  <!-- Image Column -->\n  <ng-container matColumnDef=\"image\">\n    <th mat-header-cell *matHeaderCellDef> Image</th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.imageName}} </td>\n  </ng-container>\n\n  <!--  Total instance Column -->\n  <ng-container matColumnDef=\"totalInstance\">\n    <th mat-header-cell *matHeaderCellDef> Total instance</th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.totalInstancesCount}} </td>\n  </ng-container>\n\n\n  <!--  Edit Column -->\n  <ng-container matColumnDef=\"edit\">\n    <th mat-header-cell *matHeaderCellDef>Edit</th>\n    <td mat-cell *matCellDef=\"let element\">\n      <button class=\"color-black-medium icon\" mat-icon-button (click)=\"preventOpenExpansion(); edit(element)\">\n        <mat-icon>edit</mat-icon>\n      </button>\n    </td>\n  </ng-container>\n\n\n  <!--  Delete Column -->\n  <ng-container matColumnDef=\"delete\">\n    <th mat-header-cell *matHeaderCellDef>Delete</th>\n    <td mat-cell *matCellDef=\"let element\">\n      <button [hidden]=\"service.isDefaultService(element.serviceName)\" class=\"color-black-medium icon\" mat-icon-button\n              (click)=\"preventOpenExpansion(); deleteService(element)\">\n        <mat-icon>delete</mat-icon>\n      </button>\n    </td>\n  </ng-container>\n\n\n  <ng-container matColumnDef=\"scale\">\n    <th mat-header-cell *matHeaderCellDef>Scale</th>\n    <td mat-cell *matCellDef=\"let element ; let i = index;\" class=\"pr-4 pt-2 pb-2\">\n      <div class=\"form-control mr-3\" (click)=\"preventOpenExpansion()\">\n        <mat-select [value]=\"element?.replicas.toString()\" [disabled]=\"!element.serviceId\" placeholder=\"shut down\"\n                    (valueChange)=\"onChange(element.serviceId,$event,element.serviceName,i)\">\n          <mat-option *ngIf=\"!service.isDefaultService(element.serviceName)\" value=\"0\">shut down</mat-option>\n          <mat-option value=\"1\">1</mat-option>\n          <mat-option value=\"2\">2</mat-option>\n          <mat-option value=\"3\">3</mat-option>\n          <mat-option value=\"4\">4</mat-option>\n          <mat-option value=\"5\">5</mat-option>\n          <mat-option value=\"6\">6</mat-option>\n          <mat-option value=\"7\">7</mat-option>\n          <mat-option value=\"8\">8</mat-option>\n          <mat-option value=\"9\">9</mat-option>\n          <mat-option value=\"10\">10</mat-option>\n        </mat-select>\n      </div>\n    </td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"createAtAndupdateAt\">\n    <th mat-header-cell *matHeaderCellDef>CreateAt<br>UpdateAt</th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.createdAt | date : 'medium'}}\n      <br> {{element.updatedAt | date : 'medium'}} </td>\n  </ng-container>\n\n\n  <!-- Expanded Content Column - The detail row is made up of this one column that spans across all columns -->\n  <ng-container matColumnDef=\"expandedDetail\">\n    <td mat-cell *matCellDef=\"let element\" [attr.colspan]=\"displayedColumns.length\">\n      <div class=\"example-element-detail\"\n           [@detailExpand]=\"element == expandedElement ? 'expanded' : 'collapsed'\">\n        <div class=\"p-5\">\n          <table class=\"table\">\n            <thead class=\"thead-light\">\n            <tr>\n              <th scope=\"col\">PID</th>\n              <th scope=\"col\">State</th>\n              <th scope=\"col\">Message</th>\n              <th scope=\"col\">Update At</th>\n              <th scope=\"col\">Error</th>\n            </tr>\n            </thead>\n\n            <tbody>\n            <tr *ngFor=\"let item of tableItems; index as i\"\n                [ngClass]=\"{\n                   'table-success': (detectColor(item.status.State)=='green'),\n                   'table-danger' : (detectColor(item.status.State) == 'red'),\n                   'table-primary':(detectColor(item.status.State) == 'blue')\n                  }\">\n              <td>{{item.status.ContainerStatus?.PID}}</td>\n              <td>{{item.status.State}}</td>\n              <td>{{item.status.Message}}</td>\n              <td>{{item.updatedAt | date : 'medium'}}</td>\n              <td>{{item.status.Err}}</td>\n            </tr>\n            </tbody>\n          </table>\n        </div>\n\n      </div>\n    </td>\n  </ng-container>\n\n\n\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n  <tr mat-row *matRowDef=\"let element; let i = index; columns: displayedColumns;\"\n      class=\"hover \"\n\n\n      [ngClass]=\"{\n        'cursor-poiner' : element.serviceId,\n        'background-light-red' : !element.serviceId,\n        'example-expanded-row' : expandedElement === element\n      }\"\n      (click)=\"changeExpansion(element,i)\">\n  </tr>\n  <tr mat-row *matRowDef=\"let row; columns: ['expandedDetail']\" class=\"example-detail-row\"></tr>\n\n\n</table>\n","import {Component, Input, OnChanges, OnInit, ViewChild} from '@angular/core';\r\nimport {LogManagementService} from '../../services/log-management/log-management.service';\r\nimport {MatPaginator} from '@angular/material/paginator';\r\n\r\n@Component({\r\n  selector: 'app-table-log-management',\r\n  templateUrl: './table-log-management.component.html',\r\n  styleUrls: ['./table-log-management.component.css']\r\n})\r\nexport class TableLogManagementComponent implements OnInit, OnChanges {\r\n\r\n  logs: any[];\r\n  @Input() totalLength: number;\r\n  @Input() query: any;\r\n\r\n  @ViewChild('page') paginator: MatPaginator;\r\n\r\n  noResultMessage = false;\r\n  connectionFailed = false;\r\n\r\n\r\n  columnsToDisplay = ['host', 'ident', 'message', 'priority', 'facilityLevel', 'hostsource'];\r\n  pageIndex: any;\r\n  pageSize: any;\r\n\r\n  constructor(private service: LogManagementService) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n\r\n    // console.log(this.query);\r\n    // this.search(this.query);\r\n\r\n  }\r\n\r\n  ngOnChanges(changes) {\r\n\r\n\r\n    this.connectionFailed = false;\r\n    this.noResultMessage = false;\r\n\r\n\r\n    let queryStr: string = changes.query.currentValue;\r\n    queryStr = queryStr.replace('\"new Date(', 'new Date(\"');\r\n    queryStr = queryStr.replace('\"new Date(', 'new Date(\"');\r\n    queryStr = queryStr.replace(')\"', '\")');\r\n    queryStr = queryStr.replace(')\"', '\")');\r\n    console.log(queryStr);\r\n    this.search(queryStr);\r\n    // this.paginator.firstPage();\r\n  }\r\n\r\n\r\n  /*these are for elasticsearch\r\n\r\n  search(querySearch, pageIndex = 0, pageSize = 10) {\r\n    this.service.advanceSearch(querySearch, pageIndex, pageSize).subscribe(\r\n      next => {\r\n        this.logs = next['logs'];\r\n        this.totalLength = next['totalLength'];\r\n        if (this.logs.length === 0) {\r\n          this.noResultMessage = true;\r\n        } else {\r\n          this.noResultMessage = false;\r\n\r\n        }\r\n      },\r\n      error => {\r\n        console.error(error);\r\n        delete this.logs;\r\n        this.connectionFailed = true;\r\n      }\r\n    );\r\n  }*/\r\n\r\n\r\n  // these are for mongodb\r\n  search(queryString: string) {\r\n    let body = {\r\n      query: queryString\r\n    };\r\n\r\n    console.log(JSON.stringify(body));\r\n\r\n    this.service.searchLog(body).subscribe(\r\n      (response: any[]) => {\r\n        console.log(response);\r\n        this.logs = response;\r\n\r\n        if (this.logs.length === 0) {\r\n          this.noResultMessage = true;\r\n        } else {\r\n          this.noResultMessage = false;\r\n\r\n        }\r\n\r\n      },\r\n      error => {\r\n        error => {\r\n          console.error(error);\r\n          delete this.logs;\r\n          this.connectionFailed = true;\r\n        };\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  /* paging(event) {\r\n     console.log(event);\r\n     this.logs = [];\r\n     this.search(this.query, event.pageIndex, event.pageSize);\r\n   }*/\r\n}\r\n","\r\n\r\n<div class=\"mat-elevation-z1\"\r\n     *ngIf=\"!noResultMessage && !connectionFailed\">\r\n  <table mat-table [dataSource]=\"logs\"  >\r\n\r\n    <mat-text-column name=\"host\"></mat-text-column>\r\n    <mat-text-column name=\"ident\"></mat-text-column>\r\n    <mat-text-column name=\"message\"></mat-text-column>\r\n    <mat-text-column name=\"priority\"></mat-text-column>\r\n    <mat-text-column name=\"facilityLevel\"></mat-text-column>\r\n    <mat-text-column name=\"hostsource\"></mat-text-column>\r\n\r\n    <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"></tr>\r\n    <tr mat-row class=\"hover\" *matRowDef=\"let myRowData; columns: columnsToDisplay\"></tr>\r\n\r\n  </table>\r\n\r\n  <!--<mat-paginator\r\n      #page\r\n    [pageSizeOptions]=\"[10, 20, 30, 40, 50]\"\r\n    [pageIndex]=\"pageIndex\"\r\n    [pageSize]=\"pageSize\"\r\n\r\n    [length]=\"totalLength\"\r\n    (page)=\"paging($event)\"\r\n    showFirstLastButtons></mat-paginator>-->\r\n</div>\r\n\r\n<div *ngIf=\"noResultMessage\" class=\"alert alert-danger\" role=\"alert\">NOT found any result</div>\r\n<div *ngIf=\"connectionFailed\" class=\"alert alert-danger\" role=\"alert\">server connection failed</div>\r\n\r\n\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {ChangePasswordComponent} from '../../Modal/change-password/change-password.component';\r\nimport {Router} from '@angular/router';\r\n\r\nimport {LoginService} from '../../services/login-service/login.service';\r\nimport {ImageService} from '../../services/image/image.service';\r\n\r\n@Component({\r\n  selector: 'app-toolbar',\r\n  templateUrl: './toolbar.component.html',\r\n  styleUrls: ['./toolbar.component.css']\r\n})\r\nexport class ToolbarComponent implements OnInit {\r\n\r\n  constructor(public matDilog: MatDialog, private router: Router, private service: LoginService, public imageService: ImageService) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n  openDialog(): void {\r\n\r\n    let dialogRef = this.matDilog.open(ChangePasswordComponent, {\r\n      width: '450px'\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(\r\n      result => {\r\n        console.log(result);\r\n      }\r\n    );\r\n\r\n\r\n  }\r\n\r\n  signOut(): void {\r\n\r\n    this.service.expireSession().subscribe(\r\n      response => {\r\n        localStorage.removeItem('token');\r\n        this.router.navigate(['/login']);\r\n      }\r\n    );\r\n\r\n\r\n  }\r\n}\r\n","<nav class=\"navbar background-primary mat-elevation-z4\">\r\n  <span class=\"navbar-brand color-white-high\">Sina Server manager</span>\r\n\r\n  <span class=\"space\"></span>\r\n\r\n  <button mat-icon-button [disabled]=\"imageService.updating\" [matMenuTriggerFor]=\"menu\" class=\"color-white-medium color-white-high-hover none-outline\">\r\n    <mat-icon>person</mat-icon>\r\n  </button>\r\n\r\n  <mat-menu #menu>\r\n    <button class=\"none-outline\" (click)=\"openDialog()\" mat-menu-item>\r\n      <mat-icon>lock</mat-icon>\r\n      <span>change password</span>\r\n    </button>\r\n\r\n\r\n    <button class=\"none-outline\" (click)=\"signOut()\" mat-menu-item>\r\n      <mat-icon>close</mat-icon>\r\n      <span>sign out</span>\r\n    </button>\r\n  </mat-menu>\r\n\r\n</nav>\r\n","import {Component, OnInit} from '@angular/core';\nimport {User} from '../../interfaces/User';\nimport {UserManagementService} from '../../services/user-management/user-management.service';\n\n@Component({\n  selector: 'app-user-management',\n  templateUrl: './user-management.component.html',\n  styleUrls: ['./user-management.component.css']\n})\nexport class UserManagementComponent implements OnInit {\n\n  users: User[];\n\n  constructor(private service: UserManagementService) {\n  }\n\n\n  ngOnInit(): void {\n\n    this.service.getUsers().subscribe(\n      response => {\n        this.users = response;\n      }\n    );\n\n  }\n\n}\n","<app-panel>\r\n  <ng-container class=\"header\">\r\n\r\n  </ng-container>\r\n  <ng-container class=\"body\">\r\n    <app-expansions-user-management [items]=\"users\"></app-expansions-user-management>\r\n  </ng-container>\r\n</app-panel>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {SpinnerService} from '../../services/spinner/spinner.service';\r\n\r\n@Component({\r\n  selector: 'app-waite-mode',\r\n  templateUrl: './wait-mode.component.html',\r\n  styleUrls: ['./wait-mode.component.css']\r\n})\r\nexport class WaitModeComponent implements OnInit {\r\n\r\n  constructor(public spinnerService: SpinnerService) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n\r\n\r\n}\r\n","<div *ngIf=\"spinnerService.isDisable\" class=\"loading-indicator\">\r\n  <mat-progress-spinner  mode=\"indeterminate\"></mat-progress-spinner>\r\n</div>\r\n","import {Injectable} from '@angular/core';\r\nimport {HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\nimport {SpinnerService} from '../services/spinner/spinner.service';\r\nimport {finalize} from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class SpinnerInterceptor implements HttpInterceptor {\r\n\r\n  constructor(private spinnerService: SpinnerService) {\r\n  }\r\n\r\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n    if (request.headers.get('enable-spinner') == 'true') {\r\n      this.spinnerService.setDisable(true);\r\n      return next.handle(request).pipe(\r\n        finalize(() => {\r\n          this.spinnerService.setDisable(false);\r\n        })\r\n      );\r\n    } else {\r\n      return next.handle(request);\r\n    }\r\n\r\n  }\r\n}\r\n","import {Injectable} from '@angular/core';\nimport {HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\nimport {Observable, throwError} from 'rxjs';\nimport {catchError} from 'rxjs/operators';\nimport {Router} from '@angular/router';\nimport {LoginService} from '../services/login-service/login.service';\n\n@Injectable()\nexport class UnauthorizedInterceptor implements HttpInterceptor {\n\n  constructor(private router: Router, private login: LoginService) {\n  }\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    return next.handle(request).pipe(\n      catchError((error: HttpErrorResponse) => {\n        if (error.error.error == 'Unauthorized') {\n          this.router.navigate(['/login']);\n        }\n        console.log('interceptor');\n        console.log(error);\n        return throwError(error);\n      }));\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {CanActivate, Router} from '@angular/router';\nimport {LoginService} from '../login-service/login.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuardService implements CanActivate {\n\n  constructor(private router: Router, private service: LoginService) {\n  }\n\n  canActivate(): boolean {\n\n    if (this.service.isLoginIn()) {\n      return true;\n    } else {\n      this.router.navigate(['login']);\n      return false;\n    }\n\n  }\n}\n","import {Injectable} from '@angular/core';\r\nimport {Dashboard} from '../../interfaces/Dashboard';\r\nimport {Observable, of} from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DashboardService {\r\n\r\n  constructor() {\r\n  }\r\n\r\n  elements: Dashboard[] = [\r\n    {title: 'HDD #1', content: '15 GB free', percentage: 90},\r\n    {title: 'HDD #2', content: '250 GB free', percentage: 0},\r\n    {title: 'HDD #3', content: '180 GB free', percentage: 60},\r\n    {title: 'HDD #3', content: '100 GB free', percentage: 40},\r\n    {title: 'RAM #1', content: '1 GB free', percentage: 15},\r\n    {title: 'RAM #2', content: '1.5 GB free', percentage: 20},\r\n    {title: 'HDD #1', content: '15 GB free', percentage: 90},\r\n    {title: 'HDD #2', content: '250 GB free', percentage: 0},\r\n    {title: 'HDD #3', content: '180 GB free', percentage: 60},\r\n    {title: 'HDD #3', content: '100 GB free', percentage: 40},\r\n    {title: 'RAM #1', content: '1 GB free', percentage: 15},\r\n    {title: 'RAM #2', content: '1.5 GB free', percentage: 20},\r\n    {title: 'HDD #1', content: '15 GB free', percentage: 90},\r\n    {title: 'HDD #2', content: '0 GB free', percentage: 100},\r\n    {title: 'HDD #3', content: '180 GB free', percentage: 60},\r\n    {title: 'HDD #3', content: '100 GB free', percentage: 40},\r\n    {title: 'RAM #1', content: '1 GB free', percentage: 15},\r\n    {title: 'RAM #2', content: '1.5 GB free', percentage: 20},\r\n\r\n  ];\r\n\r\n\r\n  getElement(): Observable<Dashboard[]> {\r\n    return of(this.elements);\r\n  }\r\n\r\n}\r\n","import {Injectable} from '@angular/core';\nimport {Information} from '../../../Information';\nimport {LoginService} from '../login-service/login.service';\nimport {HttpClient} from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HostService {\n\n  private getAllNodesUrl = this.inf.host + '/swarm/nodes';\n  private updateNodesUrl = this.inf.host + '/swarm/nodes/';\n  private lastNodeVersion = this.inf.host + '/swarm/nodes/lastversion/';\n  private getHostsUrl = this.inf.host + '/swarm/nodes/hosts';\n\n  private getUpdateNodeUrl(id: string): string {\n\n    return this.updateNodesUrl + id + '/update';\n\n  }\n\n  constructor(private inf: Information, private loginService: LoginService, private http: HttpClient) {\n  }\n\n  public getAllHost() {\n    let header = this.inf.getHeader(this.loginService);\n    return this.http.post(this.getAllNodesUrl, null, {headers: header, withCredentials: true});\n  }\n\n  public updateNode(id: string, version, body: any) {\n    let header = this.inf.getHeader(this.loginService);\n    console.log(header);\n    return this.http.post(this.getUpdateNodeUrl(id), body, {\n      headers: header,\n      params: {\n        'version': version,\n      },\n      withCredentials: true,\n      responseType: 'text'\n    });\n\n  }\n\n  public getLastNodeVersion(id: string) {\n    let header = this.inf.getHeader(this.loginService);\n    return this.http.get(this.lastNodeVersion + id, {headers: header, withCredentials: true});\n  }\n\n  public getHosts() {\n    const header = this.inf.getHeader(this.loginService);\n    return this.http.post(this.getHostsUrl, null, {headers: header, withCredentials: true});\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {Information} from '../../../Information';\nimport {HttpClient, HttpEventType} from '@angular/common/http';\nimport {LoginService} from '../login-service/login.service';\nimport {Observable} from 'rxjs';\nimport {filter} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ImageService {\n\n\n  constructor(private inf: Information, private http: HttpClient, private login: LoginService) {\n  }\n\n  private _updating = false;\n  private uploadUrl = this.inf.host + '/swarm/images/import/tar';\n  private imagesUrl = this.inf.host + '/swarm/images';\n  private deleteImageUrl = this.inf.host + '/swarm/images/';\n\n  public set updating(bool: boolean) {\n    this._updating = bool;\n  }\n\n  public get updating() {\n    return this._updating;\n  }\n\n\n  public uploadFile(file: File, host: string) {\n    let header = this.inf.getHeader(this.login, false);\n    let formData = new FormData();\n    formData.append('image', file, file.name);\n    return this.http.post(this.uploadUrl, formData,\n      {\n        headers: header,\n        params: {\n          'host': host\n        },\n        withCredentials: true,\n        reportProgress: true,\n        observe: 'events'\n      }).pipe(\n      filter(x => x.type === HttpEventType.UploadProgress)\n    );\n  }\n\n\n  public getImages(host: string): Observable<any> {\n    const header = this.inf.getHeader(this.login);\n    return this.http.post(this.imagesUrl, null,\n      {\n        headers: header,\n        params: {\n          'host': host\n        },\n        withCredentials: true,\n\n      });\n  }\n\n  public deleteImage(id: string, host: string, force: boolean) {\n\n    const header = this.inf.getHeader(this.login);\n    return this.http.delete(this.deleteImageUrl + id,\n      {\n        params: {\n          'force': String(force),\n          'host': host\n        },\n        headers: header,\n        withCredentials: true\n      });\n  }\n\n  /*public getHosts() {\n    const header = this.inf.getHeader(this.login);\n    return this.http.post(this.getHostsUrl, null, {headers: header, withCredentials: true});\n  }*/\n\n}\n","import {Injectable} from '@angular/core';\r\nimport {Information} from '../../../Information';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {LoginService} from '../login-service/login.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LogManagementService {\r\n\r\n  constructor(private inf: Information, private httpClient: HttpClient, private loginService: LoginService) {\r\n  }\r\n\r\n  private searchLogUrl = this.inf.host + '/log/syslog';\r\n\r\n  searchLog(body) {\r\n\r\n    let header = this.inf.getHeader(this.loginService);\r\n    return this.httpClient.post(this.searchLogUrl, body, {headers: header, withCredentials: true});\r\n\r\n  }\r\n\r\n\r\n  /*advanceSearchURI = this.inf.localHost + '/logs/findByQuery';\r\n\r\n\r\n  advanceSearch(query: any, page ?: number, pageSize ?: number) {\r\n\r\n    return this.httpClient.patch<Log[]>(this.advanceSearchURI, query, {\r\n      params: {'page': page.toString(), 'pageSize': pageSize.toString()},\r\n      headers: this.inf.getHeader()\r\n    });\r\n  }*/\r\n\r\n\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {JwtHelperService} from '@auth0/angular-jwt';\r\nimport {Information} from '../../../Information';\r\nimport {HttpClient, HttpResponse} from '@angular/common/http';\r\nimport {map} from 'rxjs/operators';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LoginService {\r\n\r\n  constructor(private inf: Information, private http: HttpClient) {\r\n\r\n  }\r\n\r\n  urlAuthenticate = this.inf.host + '/authenticate';\r\n  urlfindUsers = this.inf.host + '/sina/users';\r\n  urlChangePassword = this.inf.host + '/sina/users/password';\r\n  urlExpireSession = this.inf.host + '/expireSession';\r\n\r\n\r\n\r\n  token: string;\r\n\r\n  getTokenForHeader(): string {\r\n    return 'Bearer ' + localStorage.getItem('token');\r\n  }\r\n\r\n  getToken(): string {\r\n    return localStorage.getItem('token');\r\n  }\r\n\r\n  setToken(token: string): void {\r\n    localStorage.setItem('token', token);\r\n  }\r\n\r\n  getTokenFromServer(body) {\r\n    const headers = this.inf.getHeader();\r\n\r\n    //,\r\n    //       observe: 'response'\r\n\r\n    return this.http.post<HttpResponse<Object>>(this.urlAuthenticate, body, {headers: headers, withCredentials: true}).pipe(\r\n      map((res) => {\r\n\r\n        if (res['token']) {\r\n          this.setToken(res['token']);\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      })\r\n    );\r\n\r\n  }\r\n\r\n  isLoginIn(): boolean {\r\n\r\n    if (!this.getToken()) {\r\n      return false;\r\n    }\r\n\r\n\r\n    let helper = new JwtHelperService();\r\n    return !helper.isTokenExpired(this.getToken());\r\n\r\n  }\r\n\r\n  public get currentUser() {\r\n    let token = this.getToken();\r\n\r\n    if (!token) {\r\n      return null;\r\n    }\r\n\r\n    return new JwtHelperService().decodeToken(token).sub;\r\n  }\r\n\r\n\r\n  public getUserByUsername(username: string) {\r\n\r\n    return this.http.get(this.urlfindUsers, {\r\n      params: {username: username},\r\n      headers: this.inf.getHeader(this),\r\n      withCredentials: true\r\n    });\r\n  }\r\n\r\n  public changePassword(body) {\r\n    return this.http.patch(this.urlChangePassword, body, {headers: this.inf.getHeader(this), withCredentials: true});\r\n  }\r\n\r\n\r\n\r\n  public expireSession() {\r\n\r\n    return this.http.post(this.urlExpireSession, {}, {headers: this.inf.getHeader(this), withCredentials: true});\r\n\r\n  }\r\n\r\n\r\n}\r\n","import {Injectable} from '@angular/core';\nimport {Information} from '../../../Information';\nimport {HttpClient} from '@angular/common/http';\nimport {LoginService} from '../login-service/login.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NetworkService {\n\n  constructor(private inf: Information, private http: HttpClient, private loginService: LoginService) {\n  }\n\n  private networkUrl = this.inf.host + '/network';\n\n\n  public getAllNetworks() {\n    const header = this.inf.getHeader(this.loginService);\n    return this.http.get(this.networkUrl, {headers: header, withCredentials: true});\n  }\n\n  public createNetwork(name: string) {\n\n    const header = this.inf.getHeader(this.loginService);\n    return this.http.post(this.networkUrl, null,\n      {\n        headers: header,\n        params: {'name': name},\n        withCredentials: true\n      }\n    );\n\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {Information} from '../../../Information';\nimport {HttpClient} from '@angular/common/http';\nimport {LoginService} from '../login-service/login.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NodesNetworkManagementService {\n\n  sshNetworkUrl = this.inf.host + '/ssh/node-network';\n\n  constructor(private inf: Information, private http: HttpClient, private loginService: LoginService) {\n  }\n\n  saveNode(body: any) {\n    let header = this.inf.getHeader(this.loginService);\n    return this.http.post(this.sshNetworkUrl, body, {headers: header, withCredentials: true});\n  }\n\n}\n","import {Injectable} from '@angular/core';\r\nimport {Information} from '../../../Information';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {LoginService} from '../login-service/login.service';\r\nimport {Observable} from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ServiceMonitoringService {\r\n\r\n  private serviceUrl = this.inf.host + '/swarm/services';\r\n  private findAllUrl = this.serviceUrl + '/preview';\r\n  private networkUrl = this.inf.host + '/network/name';\r\n  private _defaultServiceName = ['north-bound', 'south-bound', 'topology-service', 'td-agent', 'mongodb', 'postgresql', 'rabbitmq', 'docker-manager'];\r\n\r\n  get defaultServiceName() {\r\n    return this._defaultServiceName;\r\n  }\r\n\r\n  private getTasksUrl(serviceName: string): string {\r\n    return this.inf.host + '/swarm/tasks/preview/' + serviceName;\r\n  }\r\n\r\n  constructor(private inf: Information, private http: HttpClient, private loginService: LoginService) {\r\n  }\r\n\r\n\r\n  getService() {\r\n    const headers = this.inf.getHeader(this.loginService);\r\n    return this.http.post(this.findAllUrl, null, {headers: headers, withCredentials: true});\r\n  }\r\n\r\n  public isDefaultService(serviceName: string) {\r\n\r\n    for (const service of this.defaultServiceName) {\r\n      if (service.trim() === serviceName.trim()) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  public changeReplicas(id, replicas) {\r\n    const headers = this.inf.getHeader(this.loginService);\r\n    const body = {\r\n      id: id,\r\n      replicas: replicas\r\n    };\r\n    return this.http.patch(this.serviceUrl, body, {headers: headers, withCredentials: true});\r\n  }\r\n\r\n\r\n  public getTasks(serviceName: string) {\r\n    const headers = this.inf.getHeader(this.loginService);\r\n    return this.http.get(this.getTasksUrl(serviceName), {headers: headers, withCredentials: true});\r\n  }\r\n\r\n  public createService(body: any) {\r\n    let header = this.inf.getHeader(this.loginService);\r\n    return this.http.post(this.serviceUrl, body, {headers: header, withCredentials: true});\r\n  }\r\n\r\n  public updateService(serviceId: string, body: any) {\r\n    let header = this.inf.getHeader(this.loginService);\r\n    return this.http.put(this.serviceUrl, body, {\r\n      headers: header,\r\n      withCredentials: true,\r\n      params: {id: serviceId},\r\n      responseType: 'text'\r\n    });\r\n  }\r\n\r\n  public deleteService(serviceId: string): Observable<Object> {\r\n    let header = this.inf.getHeader(this.loginService);\r\n    return this.http.delete(this.serviceUrl + '/' + serviceId,\r\n      {\r\n        headers: header,\r\n        withCredentials: true,\r\n        responseType: 'text'\r\n      });\r\n  }\r\n\r\n  public getDetailService(serviceId ?: string) {\r\n    let body = {\r\n      id: [serviceId]\r\n    };\r\n    let header = this.inf.getHeader(this.loginService);\r\n    return this.http.post(this.serviceUrl + '/detail', body, {\r\n      headers: header,\r\n      withCredentials: true\r\n    });\r\n  }\r\n\r\n  public getAllNetworksName() {\r\n    const header = this.inf.getHeader(this.loginService);\r\n    return this.http.get(this.networkUrl, {headers: header, withCredentials: true});\r\n  }\r\n\r\n}\r\n","import {Injectable} from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SpinnerService {\r\n\r\n  isDisable = false;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  public setDisable(bool = false) {\r\n    this.isDisable = bool;\r\n  }\r\n}\r\n","import {Injectable} from '@angular/core';\nimport {User} from '../../interfaces/User';\nimport {Observable, of} from 'rxjs';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserManagementService {\n\n  users: User[] = [\n    {username: 'Admin', role: 'ADMIN'},\n    {username: 'Sina', role: 'ADMIN'},\n    {username: 'Mokhaberat', role: 'ADMIN'},\n    {username: 'Ali', role: 'ADMIN'},\n    {username: 'Monitoring', role: 'DEACTIVATED'}\n  ];\n\n\n  constructor() {\n  }\n\n  getUsers(): Observable<User[]> {\n    return of(this.users);\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}